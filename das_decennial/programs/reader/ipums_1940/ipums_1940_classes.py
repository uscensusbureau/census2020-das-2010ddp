#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This file was automatically generated by census_etl/census_spec_scanner.py on Fri Feb  8 12:02:38 2019
# Command line: census_etl/census_spec_scanner.py ipums_1940/EXT1940USCB.sas --output_parser ipums_1940/ipums_1940_classes.py
# Note: This file has been manually modified after generation. As of 20200130 the spec_scanner.py requires updating
#   in order to generate all the necessary components for full reading functionality.

def leftpad(x,width):
    return ' '*(width-len(str(x)))+str(x)

def between(a,b,c,width):
    return leftpad(a,width) <= leftpad(b,width) <= leftpad(c,width)

def safe_int(i):
    try:
        return int(i)
    except (TypeError, ValueError) as e:
        return None

def safe_float(i):
    try:
        return float(i)
    except (TypeError, ValueError) as e:
        return None

def safe_str(i):
    try:
        return str(i)
    except (TypeError, ValueError) as e:
        return None


class H_validator:
    @classmethod
    def is_valid_RECTYPE(self,x):
        """Record type"""
        return True
    @classmethod
    def is_valid_YEAR(self,x):
        """Census year"""
        return True
    @classmethod
    def is_valid_DATANUM(self,x):
        """Data set number"""
        return True
    @classmethod
    def is_valid_SERIAL(self,x):
        """Household serial number"""
        return True
    @classmethod
    def is_valid_NUMPREC(self,x):
        """Number of person records following"""
        return True
    @classmethod
    def is_valid_SUBSAMP(self,x):
        """Subsample number"""
        return True
    @classmethod
    def is_valid_HHWT(self,x):
        """Household weight"""
        return True
    @classmethod
    def is_valid_NUMPERHH(self,x):
        """Number of persons in household"""
        return True
    @classmethod
    def is_valid_HHTYPE(self,x):
        """Household Type"""
        return True
    @classmethod
    def is_valid_DWELLING(self,x):
        """Dwelling serial number"""
        return True
    @classmethod
    def is_valid_SLPERNUM(self,x):
        """Sample-line person number"""
        return True
    @classmethod
    def is_valid_CPI99(self,x):
        """CPI-U adjustment factor to 1999 dollars"""
        return True
    @classmethod
    def is_valid_REGION(self,x):
        """Census region and division"""
        return True
    @classmethod
    def is_valid_STATEICP(self,x):
        """State (ICPSR code)"""
        return True
    @classmethod
    def is_valid_STATEFIP(self,x):
        """State (FIPS code)"""
        return True
    @classmethod
    def is_valid_COUNTY(self,x):
        """County"""
        return True
    @classmethod
    def is_valid_URBAN(self,x):
        """Urban/rural status"""
        return True
    @classmethod
    def is_valid_METRO(self,x):
        """Metropolitan status"""
        return True
    @classmethod
    def is_valid_METAREA(self,x):
        """Metropolitan area [general version]"""
        return True
    @classmethod
    def is_valid_METAREAD(self,x):
        """Metropolitan area [detailed version]"""
        return True
    @classmethod
    def is_valid_CITY(self,x):
        """City"""
        return True
    @classmethod
    def is_valid_CITYPOP(self,x):
        """City population"""
        return True
    @classmethod
    def is_valid_SIZEPL(self,x):
        """Size of place"""
        return True
    @classmethod
    def is_valid_URBPOP(self,x):
        """Population of urban places"""
        return True
    @classmethod
    def is_valid_SEA(self,x):
        """State Economic Area"""
        return True
    @classmethod
    def is_valid_WARD(self,x):
        """Ward"""
        return True
    @classmethod
    def is_valid_CNTRY(self,x):
        """Country"""
        return True
    @classmethod
    def is_valid_GQ(self,x):
        """Group quarters status"""
        return True
    @classmethod
    def is_valid_GQTYPE(self,x):
        """Group quarters type [general version]"""
        return True
    @classmethod
    def is_valid_GQTYPED(self,x):
        """Group quarters type [detailed version]"""
        return True
    @classmethod
    def is_valid_GQFUNDS(self,x):
        """Group quarters funding"""
        return True
    @classmethod
    def is_valid_FARM(self,x):
        """Farm status"""
        return True
    @classmethod
    def is_valid_OWNERSHP(self,x):
        """Ownership of dwelling (tenure) [general version]"""
        return True
    @classmethod
    def is_valid_OWNERSHPD(self,x):
        """Ownership of dwelling (tenure) [detailed version]"""
        return True
    @classmethod
    def is_valid_RENT(self,x):
        """Monthly contract rent"""
        return True
    @classmethod
    def is_valid_VALUEH(self,x):
        """House value"""
        return True
    @classmethod
    def is_valid_NFAMS(self,x):
        """Number of families in household"""
        return True
    @classmethod
    def is_valid_NSUBFAM(self,x):
        """Number of subfamilies in household"""
        return True
    @classmethod
    def is_valid_NCOUPLES(self,x):
        """Number of couples in household"""
        return True
    @classmethod
    def is_valid_NMOTHERS(self,x):
        """Number of mothers in household"""
        return True
    @classmethod
    def is_valid_NFATHERS(self,x):
        """Number of fathers in household"""
        return True
    @classmethod
    def is_valid_MULTGEN(self,x):
        """Multigenerational household [general version]"""
        return True
    @classmethod
    def is_valid_MULTGEND(self,x):
        """Multigenerational household [detailed version]"""
        return True
    @classmethod
    def is_valid_ENUMDIST(self,x):
        """Enumeration district"""
        return True
    @classmethod
    def is_valid_SUPDIST(self,x):
        """Supervisor's district number"""
        return True
    @classmethod
    def is_valid_RESPOND(self,x):
        """Respondent's relationship to household  head"""
        return True
    @classmethod
    def is_valid_SPLIT(self,x):
        """Large group quarters that was split up (100% datasets)"""
        return True
    @classmethod
    def is_valid_SPLITHID(self,x):
        """Household serial number, before large group quarters were split up (100% datasets)"""
        return True
    @classmethod
    def is_valid_SPLITNUM(self,x):
        """Number of person records in household, before large group quarters were split up  (100% datasets)"""
        return True
    @classmethod
    def is_valid_SPLIT40(self,x):
        """Large group quarters that was split up, 1940 100%"""
        return True
    @classmethod
    def is_valid_SERIAL40(self,x):
        """Household serial number, before large group quarters were split up, 1940 100%"""
        return True
    @classmethod
    def is_valid_NUMPREC40(self,x):
        """Number of person records in household, before large group quarters were split up, 1940 100%"""
        return True
    @classmethod
    def is_valid_EDMISS(self,x):
        """Identifies households in missing data enumeration districts"""
        return True


class H:
    __slots__ = ['RECTYPE', 'YEAR', 'DATANUM', 'SERIAL', 'NUMPREC', 'SUBSAMP', 'HHWT', 'NUMPERHH', 'HHTYPE', 'DWELLING', 'SLPERNUM', 'CPI99', 'REGION', 'STATEICP', 'STATEFIP', 'COUNTY', 'URBAN', 'METRO', 'METAREA', 'METAREAD', 'CITY', 'CITYPOP', 'SIZEPL', 'URBPOP', 'SEA', 'WARD', 'CNTRY', 'GQ', 'GQTYPE', 'GQTYPED', 'GQFUNDS', 'FARM', 'OWNERSHP', 'OWNERSHPD', 'RENT', 'VALUEH', 'NFAMS', 'NSUBFAM', 'NCOUPLES', 'NMOTHERS', 'NFATHERS', 'MULTGEN', 'MULTGEND', 'ENUMDIST', 'SUPDIST', 'RESPOND', 'SPLIT', 'SPLITHID', 'SPLITNUM', 'SPLIT40', 'SERIAL40', 'NUMPREC40', 'EDMISS']
    def __repr__(self):
        return 'H<RECTYPE:{},YEAR:{},DATANUM:{},SERIAL:{},NUMPREC:{},SUBSAMP:{},HHWT:{},NUMPERHH:{},HHTYPE:{},DWELLING:{},SLPERNUM:{},CPI99:{},REGION:{},STATEICP:{},STATEFIP:{},COUNTY:{},URBAN:{},METRO:{},METAREA:{},METAREAD:{},CITY:{},CITYPOP:{},SIZEPL:{},URBPOP:{},SEA:{},WARD:{},CNTRY:{},GQ:{},GQTYPE:{},GQTYPED:{},GQFUNDS:{},FARM:{},OWNERSHP:{},OWNERSHPD:{},RENT:{},VALUEH:{},NFAMS:{},NSUBFAM:{},NCOUPLES:{},NMOTHERS:{},NFATHERS:{},MULTGEN:{},MULTGEND:{},ENUMDIST:{},SUPDIST:{},RESPOND:{},SPLIT:{},SPLITHID:{},SPLITNUM:{},SPLIT40:{},SERIAL40:{},NUMPREC40:{},EDMISS:{}>'.format(self.RECTYPE,self.YEAR,self.DATANUM,self.SERIAL,self.NUMPREC,self.SUBSAMP,self.HHWT,self.NUMPERHH,self.HHTYPE,self.DWELLING,self.SLPERNUM,self.CPI99,self.REGION,self.STATEICP,self.STATEFIP,self.COUNTY,self.URBAN,self.METRO,self.METAREA,self.METAREAD,self.CITY,self.CITYPOP,self.SIZEPL,self.URBPOP,self.SEA,self.WARD,self.CNTRY,self.GQ,self.GQTYPE,self.GQTYPED,self.GQFUNDS,self.FARM,self.OWNERSHP,self.OWNERSHPD,self.RENT,self.VALUEH,self.NFAMS,self.NSUBFAM,self.NCOUPLES,self.NMOTHERS,self.NFATHERS,self.MULTGEN,self.MULTGEND,self.ENUMDIST,self.SUPDIST,self.RESPOND,self.SPLIT,self.SPLITHID,self.SPLITNUM,self.SPLIT40,self.SERIAL40,self.NUMPREC40,self.EDMISS)
    def __init__(self,line=None):
        if line:
            if '|' in line:
                self.parse_pipe_delimited(line)
            else:
                self.parse_column_specified(line)
    @classmethod
    def name(self):
        return 'H'

    def parse_pipe_delimited(self,line):
        fields = line.split('|')
        if len(fields)!=53:
            raise ValueError(f'expected 53 fields, found {len(fields)}')
        self.RECTYPE = fields[0]
        self.YEAR = fields[1]
        self.DATANUM = fields[2]
        self.SERIAL = fields[3]
        self.NUMPREC = fields[4]
        self.SUBSAMP = fields[5]
        self.HHWT = fields[6]
        self.NUMPERHH = fields[7]
        self.HHTYPE = fields[8]
        self.DWELLING = fields[9]
        self.SLPERNUM = fields[10]
        self.CPI99 = fields[11]
        self.REGION = fields[12]
        self.STATEICP = fields[13]
        self.STATEFIP = fields[14]
        self.COUNTY = fields[15]
        self.URBAN = fields[16]
        self.METRO = fields[17]
        self.METAREA = fields[18]
        self.METAREAD = fields[19]
        self.CITY = fields[20]
        self.CITYPOP = fields[21]
        self.SIZEPL = fields[22]
        self.URBPOP = fields[23]
        self.SEA = fields[24]
        self.WARD = fields[25]
        self.CNTRY = fields[26]
        self.GQ = fields[27]
        self.GQTYPE = fields[28]
        self.GQTYPED = fields[29]
        self.GQFUNDS = fields[30]
        self.FARM = fields[31]
        self.OWNERSHP = fields[32]
        self.OWNERSHPD = fields[33]
        self.RENT = fields[34]
        self.VALUEH = fields[35]
        self.NFAMS = fields[36]
        self.NSUBFAM = fields[37]
        self.NCOUPLES = fields[38]
        self.NMOTHERS = fields[39]
        self.NFATHERS = fields[40]
        self.MULTGEN = fields[41]
        self.MULTGEND = fields[42]
        self.ENUMDIST = fields[43]
        self.SUPDIST = fields[44]
        self.RESPOND = fields[45]
        self.SPLIT = fields[46]
        self.SPLITHID = fields[47]
        self.SPLITNUM = fields[48]
        self.SPLIT40 = fields[49]
        self.SERIAL40 = fields[50]
        self.NUMPREC40 = fields[51]
        self.EDMISS = fields[52]

    def parse_column_specified(self,line):
        self.RECTYPE = line[0:1]
        self.YEAR = line[1:5]
        self.DATANUM = line[5:7]
        self.SERIAL = line[7:15]
        self.NUMPREC = line[15:17]
        self.SUBSAMP = line[17:19]
        self.HHWT = line[19:29]
        self.NUMPERHH = line[29:33]
        self.HHTYPE = line[33:34]
        self.DWELLING = line[34:42]
        self.SLPERNUM = line[42:44]
        self.CPI99 = line[44:49]
        self.REGION = line[49:51]
        self.STATEICP = line[51:53]
        self.STATEFIP = line[53:55]
        self.COUNTY = line[55:59]
        self.URBAN = line[59:60]
        self.METRO = line[60:61]
        self.METAREA = line[61:64]
        self.METAREAD = line[64:68]
        self.CITY = line[68:72]
        self.CITYPOP = line[72:77]
        self.SIZEPL = line[77:79]
        self.URBPOP = line[79:84]
        self.SEA = line[84:87]
        self.WARD = line[87:90]
        self.CNTRY = line[90:93]
        self.GQ = line[93:94]
        self.GQTYPE = line[94:95]
        self.GQTYPED = line[95:98]
        self.GQFUNDS = line[98:100]
        self.FARM = line[100:101]
        self.OWNERSHP = line[101:102]
        self.OWNERSHPD = line[102:104]
        self.RENT = line[104:108]
        self.VALUEH = line[108:115]
        self.NFAMS = line[115:117]
        self.NSUBFAM = line[117:118]
        self.NCOUPLES = line[118:119]
        self.NMOTHERS = line[119:120]
        self.NFATHERS = line[120:121]
        self.MULTGEN = line[121:122]
        self.MULTGEND = line[122:124]
        self.ENUMDIST = line[124:128]
        self.SUPDIST = line[128:131]
        self.RESPOND = line[131:132]
        self.SPLIT = line[132:133]
        self.SPLITHID = line[133:141]
        self.SPLITNUM = line[141:145]
        self.SPLIT40 = line[145:146]
        self.SERIAL40 = line[146:154]
        self.NUMPREC40 = line[154:158]
        self.EDMISS = line[158:159]

    def validate(self):
        """Return True if the object data validates"""
        if not H_validator.is_valid_RECTYPE(self.RECTYPE): return False
        if not H_validator.is_valid_YEAR(self.YEAR): return False
        if not H_validator.is_valid_DATANUM(self.DATANUM): return False
        if not H_validator.is_valid_SERIAL(self.SERIAL): return False
        if not H_validator.is_valid_NUMPREC(self.NUMPREC): return False
        if not H_validator.is_valid_SUBSAMP(self.SUBSAMP): return False
        if not H_validator.is_valid_HHWT(self.HHWT): return False
        if not H_validator.is_valid_NUMPERHH(self.NUMPERHH): return False
        if not H_validator.is_valid_HHTYPE(self.HHTYPE): return False
        if not H_validator.is_valid_DWELLING(self.DWELLING): return False
        if not H_validator.is_valid_SLPERNUM(self.SLPERNUM): return False
        if not H_validator.is_valid_CPI99(self.CPI99): return False
        if not H_validator.is_valid_REGION(self.REGION): return False
        if not H_validator.is_valid_STATEICP(self.STATEICP): return False
        if not H_validator.is_valid_STATEFIP(self.STATEFIP): return False
        if not H_validator.is_valid_COUNTY(self.COUNTY): return False
        if not H_validator.is_valid_URBAN(self.URBAN): return False
        if not H_validator.is_valid_METRO(self.METRO): return False
        if not H_validator.is_valid_METAREA(self.METAREA): return False
        if not H_validator.is_valid_METAREAD(self.METAREAD): return False
        if not H_validator.is_valid_CITY(self.CITY): return False
        if not H_validator.is_valid_CITYPOP(self.CITYPOP): return False
        if not H_validator.is_valid_SIZEPL(self.SIZEPL): return False
        if not H_validator.is_valid_URBPOP(self.URBPOP): return False
        if not H_validator.is_valid_SEA(self.SEA): return False
        if not H_validator.is_valid_WARD(self.WARD): return False
        if not H_validator.is_valid_CNTRY(self.CNTRY): return False
        if not H_validator.is_valid_GQ(self.GQ): return False
        if not H_validator.is_valid_GQTYPE(self.GQTYPE): return False
        if not H_validator.is_valid_GQTYPED(self.GQTYPED): return False
        if not H_validator.is_valid_GQFUNDS(self.GQFUNDS): return False
        if not H_validator.is_valid_FARM(self.FARM): return False
        if not H_validator.is_valid_OWNERSHP(self.OWNERSHP): return False
        if not H_validator.is_valid_OWNERSHPD(self.OWNERSHPD): return False
        if not H_validator.is_valid_RENT(self.RENT): return False
        if not H_validator.is_valid_VALUEH(self.VALUEH): return False
        if not H_validator.is_valid_NFAMS(self.NFAMS): return False
        if not H_validator.is_valid_NSUBFAM(self.NSUBFAM): return False
        if not H_validator.is_valid_NCOUPLES(self.NCOUPLES): return False
        if not H_validator.is_valid_NMOTHERS(self.NMOTHERS): return False
        if not H_validator.is_valid_NFATHERS(self.NFATHERS): return False
        if not H_validator.is_valid_MULTGEN(self.MULTGEN): return False
        if not H_validator.is_valid_MULTGEND(self.MULTGEND): return False
        if not H_validator.is_valid_ENUMDIST(self.ENUMDIST): return False
        if not H_validator.is_valid_SUPDIST(self.SUPDIST): return False
        if not H_validator.is_valid_RESPOND(self.RESPOND): return False
        if not H_validator.is_valid_SPLIT(self.SPLIT): return False
        if not H_validator.is_valid_SPLITHID(self.SPLITHID): return False
        if not H_validator.is_valid_SPLITNUM(self.SPLITNUM): return False
        if not H_validator.is_valid_SPLIT40(self.SPLIT40): return False
        if not H_validator.is_valid_SERIAL40(self.SERIAL40): return False
        if not H_validator.is_valid_NUMPREC40(self.NUMPREC40): return False
        if not H_validator.is_valid_EDMISS(self.EDMISS): return False
        return True

    def validate_reason(self):
        reason=[]
        if not H_validator.is_valid_RECTYPE(self.RECTYPE): reason.append('RECTYPE ('+str(self.RECTYPE)+') out of range ()')
        if not H_validator.is_valid_YEAR(self.YEAR): reason.append('YEAR ('+str(self.YEAR)+') out of range ()')
        if not H_validator.is_valid_DATANUM(self.DATANUM): reason.append('DATANUM ('+str(self.DATANUM)+') out of range ()')
        if not H_validator.is_valid_SERIAL(self.SERIAL): reason.append('SERIAL ('+str(self.SERIAL)+') out of range ()')
        if not H_validator.is_valid_NUMPREC(self.NUMPREC): reason.append('NUMPREC ('+str(self.NUMPREC)+') out of range ()')
        if not H_validator.is_valid_SUBSAMP(self.SUBSAMP): reason.append('SUBSAMP ('+str(self.SUBSAMP)+') out of range ()')
        if not H_validator.is_valid_HHWT(self.HHWT): reason.append('HHWT ('+str(self.HHWT)+') out of range ()')
        if not H_validator.is_valid_NUMPERHH(self.NUMPERHH): reason.append('NUMPERHH ('+str(self.NUMPERHH)+') out of range ()')
        if not H_validator.is_valid_HHTYPE(self.HHTYPE): reason.append('HHTYPE ('+str(self.HHTYPE)+') out of range ()')
        if not H_validator.is_valid_DWELLING(self.DWELLING): reason.append('DWELLING ('+str(self.DWELLING)+') out of range ()')
        if not H_validator.is_valid_SLPERNUM(self.SLPERNUM): reason.append('SLPERNUM ('+str(self.SLPERNUM)+') out of range ()')
        if not H_validator.is_valid_CPI99(self.CPI99): reason.append('CPI99 ('+str(self.CPI99)+') out of range ()')
        if not H_validator.is_valid_REGION(self.REGION): reason.append('REGION ('+str(self.REGION)+') out of range ()')
        if not H_validator.is_valid_STATEICP(self.STATEICP): reason.append('STATEICP ('+str(self.STATEICP)+') out of range ()')
        if not H_validator.is_valid_STATEFIP(self.STATEFIP): reason.append('STATEFIP ('+str(self.STATEFIP)+') out of range ()')
        if not H_validator.is_valid_COUNTY(self.COUNTY): reason.append('COUNTY ('+str(self.COUNTY)+') out of range ()')
        if not H_validator.is_valid_URBAN(self.URBAN): reason.append('URBAN ('+str(self.URBAN)+') out of range ()')
        if not H_validator.is_valid_METRO(self.METRO): reason.append('METRO ('+str(self.METRO)+') out of range ()')
        if not H_validator.is_valid_METAREA(self.METAREA): reason.append('METAREA ('+str(self.METAREA)+') out of range ()')
        if not H_validator.is_valid_METAREAD(self.METAREAD): reason.append('METAREAD ('+str(self.METAREAD)+') out of range ()')
        if not H_validator.is_valid_CITY(self.CITY): reason.append('CITY ('+str(self.CITY)+') out of range ()')
        if not H_validator.is_valid_CITYPOP(self.CITYPOP): reason.append('CITYPOP ('+str(self.CITYPOP)+') out of range ()')
        if not H_validator.is_valid_SIZEPL(self.SIZEPL): reason.append('SIZEPL ('+str(self.SIZEPL)+') out of range ()')
        if not H_validator.is_valid_URBPOP(self.URBPOP): reason.append('URBPOP ('+str(self.URBPOP)+') out of range ()')
        if not H_validator.is_valid_SEA(self.SEA): reason.append('SEA ('+str(self.SEA)+') out of range ()')
        if not H_validator.is_valid_WARD(self.WARD): reason.append('WARD ('+str(self.WARD)+') out of range ()')
        if not H_validator.is_valid_CNTRY(self.CNTRY): reason.append('CNTRY ('+str(self.CNTRY)+') out of range ()')
        if not H_validator.is_valid_GQ(self.GQ): reason.append('GQ ('+str(self.GQ)+') out of range ()')
        if not H_validator.is_valid_GQTYPE(self.GQTYPE): reason.append('GQTYPE ('+str(self.GQTYPE)+') out of range ()')
        if not H_validator.is_valid_GQTYPED(self.GQTYPED): reason.append('GQTYPED ('+str(self.GQTYPED)+') out of range ()')
        if not H_validator.is_valid_GQFUNDS(self.GQFUNDS): reason.append('GQFUNDS ('+str(self.GQFUNDS)+') out of range ()')
        if not H_validator.is_valid_FARM(self.FARM): reason.append('FARM ('+str(self.FARM)+') out of range ()')
        if not H_validator.is_valid_OWNERSHP(self.OWNERSHP): reason.append('OWNERSHP ('+str(self.OWNERSHP)+') out of range ()')
        if not H_validator.is_valid_OWNERSHPD(self.OWNERSHPD): reason.append('OWNERSHPD ('+str(self.OWNERSHPD)+') out of range ()')
        if not H_validator.is_valid_RENT(self.RENT): reason.append('RENT ('+str(self.RENT)+') out of range ()')
        if not H_validator.is_valid_VALUEH(self.VALUEH): reason.append('VALUEH ('+str(self.VALUEH)+') out of range ()')
        if not H_validator.is_valid_NFAMS(self.NFAMS): reason.append('NFAMS ('+str(self.NFAMS)+') out of range ()')
        if not H_validator.is_valid_NSUBFAM(self.NSUBFAM): reason.append('NSUBFAM ('+str(self.NSUBFAM)+') out of range ()')
        if not H_validator.is_valid_NCOUPLES(self.NCOUPLES): reason.append('NCOUPLES ('+str(self.NCOUPLES)+') out of range ()')
        if not H_validator.is_valid_NMOTHERS(self.NMOTHERS): reason.append('NMOTHERS ('+str(self.NMOTHERS)+') out of range ()')
        if not H_validator.is_valid_NFATHERS(self.NFATHERS): reason.append('NFATHERS ('+str(self.NFATHERS)+') out of range ()')
        if not H_validator.is_valid_MULTGEN(self.MULTGEN): reason.append('MULTGEN ('+str(self.MULTGEN)+') out of range ()')
        if not H_validator.is_valid_MULTGEND(self.MULTGEND): reason.append('MULTGEND ('+str(self.MULTGEND)+') out of range ()')
        if not H_validator.is_valid_ENUMDIST(self.ENUMDIST): reason.append('ENUMDIST ('+str(self.ENUMDIST)+') out of range ()')
        if not H_validator.is_valid_SUPDIST(self.SUPDIST): reason.append('SUPDIST ('+str(self.SUPDIST)+') out of range ()')
        if not H_validator.is_valid_RESPOND(self.RESPOND): reason.append('RESPOND ('+str(self.RESPOND)+') out of range ()')
        if not H_validator.is_valid_SPLIT(self.SPLIT): reason.append('SPLIT ('+str(self.SPLIT)+') out of range ()')
        if not H_validator.is_valid_SPLITHID(self.SPLITHID): reason.append('SPLITHID ('+str(self.SPLITHID)+') out of range ()')
        if not H_validator.is_valid_SPLITNUM(self.SPLITNUM): reason.append('SPLITNUM ('+str(self.SPLITNUM)+') out of range ()')
        if not H_validator.is_valid_SPLIT40(self.SPLIT40): reason.append('SPLIT40 ('+str(self.SPLIT40)+') out of range ()')
        if not H_validator.is_valid_SERIAL40(self.SERIAL40): reason.append('SERIAL40 ('+str(self.SERIAL40)+') out of range ()')
        if not H_validator.is_valid_NUMPREC40(self.NUMPREC40): reason.append('NUMPREC40 ('+str(self.NUMPREC40)+') out of range ()')
        if not H_validator.is_valid_EDMISS(self.EDMISS): reason.append('EDMISS ('+str(self.EDMISS)+') out of range ()')
        return ', '.join(reason)



    def SparkSQLRow(self):
        """Return a SparkSQL Row object for this object."""
        from pyspark.sql import Row
        return Row(
            rectype=safe_str(self.RECTYPE),
            year=safe_str(self.YEAR),
            datanum=safe_str(self.DATANUM),
            serial=safe_str(self.SERIAL),
            numprec=safe_str(self.NUMPREC),
            subsamp=safe_str(self.SUBSAMP),
            hhwt=safe_str(self.HHWT),
            numperhh=safe_str(self.NUMPERHH),
            hhtype=safe_str(self.HHTYPE),
            dwelling=safe_str(self.DWELLING),
            slpernum=safe_str(self.SLPERNUM),
            cpi99=safe_str(self.CPI99),
            region=safe_str(self.REGION),
            stateicp=safe_str(self.STATEICP),
            statefip=safe_str(self.STATEFIP),
            county=safe_str(self.COUNTY),
            urban=safe_str(self.URBAN),
            metro=safe_str(self.METRO),
            metarea=safe_str(self.METAREA),
            metaread=safe_str(self.METAREAD),
            city=safe_str(self.CITY),
            citypop=safe_str(self.CITYPOP),
            sizepl=safe_str(self.SIZEPL),
            urbpop=safe_str(self.URBPOP),
            sea=safe_str(self.SEA),
            ward=safe_str(self.WARD),
            cntry=safe_str(self.CNTRY),
            gq=safe_str(self.GQ),
            gqtype=safe_str(self.GQTYPE),
            gqtyped=safe_str(self.GQTYPED),
            gqfunds=safe_str(self.GQFUNDS),
            farm=safe_str(self.FARM),
            ownershp=safe_str(self.OWNERSHP),
            ownershpd=safe_str(self.OWNERSHPD),
            rent=safe_str(self.RENT),
            valueh=safe_str(self.VALUEH),
            nfams=safe_str(self.NFAMS),
            nsubfam=safe_str(self.NSUBFAM),
            ncouples=safe_str(self.NCOUPLES),
            nmothers=safe_str(self.NMOTHERS),
            nfathers=safe_str(self.NFATHERS),
            multgen=safe_str(self.MULTGEN),
            multgend=safe_str(self.MULTGEND),
            enumdist=safe_str(self.ENUMDIST),
            supdist=safe_str(self.SUPDIST),
            respond=safe_str(self.RESPOND),
            split=safe_str(self.SPLIT),
            splithid=safe_str(self.SPLITHID),
            splitnum=safe_str(self.SPLITNUM),
            split40=safe_str(self.SPLIT40),
            serial40=safe_str(self.SERIAL40),
            numprec40=safe_str(self.NUMPREC40),
            edmiss=safe_str(self.EDMISS),
        )

    @staticmethod
    def parse_line(line):
        """Read a line and return it as a dictionary. This should be automatically generated..."""
        inst: H = H()
        inst.parse_column_specified(line)
        assert inst.validate(), f'A line is invalid!! line: {line}, validate_reason: {inst.validate_reason()}'
        row = inst.SparkSQLRow()
        return row




def leftpad(x,width):
    return ' '*(width-len(str(x)))+str(x)

def between(a,b,c,width):
    return leftpad(a,width) <= leftpad(b,width) <= leftpad(c,width)

def safe_int(i):
    try:
        return int(i)
    except (TypeError, ValueError) as e:
        return None

def safe_float(i):
    try:
        return float(i)
    except (TypeError, ValueError) as e:
        return None

def safe_str(i):
    try:
        return str(i)
    except (TypeError, ValueError) as e:
        return None


class P_validator:
    @classmethod
    def is_valid_RECTYPE(self,x):
        """Record type"""
        return True
    @classmethod
    def is_valid_YEAR(self,x):
        """Census year"""
        return True
    @classmethod
    def is_valid_DATANUM(self,x):
        """Data set number"""
        return True
    @classmethod
    def is_valid_SERIAL(self,x):
        """Household serial number"""
        return True
    @classmethod
    def is_valid_PERNUM(self,x):
        """Person number in sample unit"""
        return True
    @classmethod
    def is_valid_PERWT(self,x):
        """Person weight"""
        return True
    @classmethod
    def is_valid_SLWT(self,x):
        """Sample-line weight"""
        return True
    @classmethod
    def is_valid_SLREC(self,x):
        """Sample-line person identifier"""
        return True
    @classmethod
    def is_valid_RESPONDT(self,x):
        """Respondent indicator"""
        return True
    @classmethod
    def is_valid_FAMUNIT(self,x):
        """Family unit membership"""
        return True
    @classmethod
    def is_valid_FAMSIZE(self,x):
        """Number of own family members in household"""
        return True
    @classmethod
    def is_valid_SUBFAM(self,x):
        """Subfamily membership"""
        return True
    @classmethod
    def is_valid_SFTYPE(self,x):
        """Subfamily type"""
        return True
    @classmethod
    def is_valid_SFRELATE(self,x):
        """Relationship within subfamily"""
        return True
    @classmethod
    def is_valid_MOMLOC(self,x):
        """Mother's location in the household"""
        return True
    @classmethod
    def is_valid_STEPMOM(self,x):
        """Probable step/adopted mother"""
        return True
    @classmethod
    def is_valid_MOMRULE_HIST(self,x):
        """"""
        return True
    @classmethod
    def is_valid_POPLOC(self,x):
        """Father's location in the household"""
        return True
    @classmethod
    def is_valid_STEPPOP(self,x):
        """Probable step/adopted father"""
        return True
    @classmethod
    def is_valid_POPRULE_HIST(self,x):
        """"""
        return True
    @classmethod
    def is_valid_SPLOC(self,x):
        """Spouse's location in household"""
        return True
    @classmethod
    def is_valid_SPRULE_HIST(self,x):
        """"""
        return True
    @classmethod
    def is_valid_NCHILD(self,x):
        """Number of own children in the household"""
        return True
    @classmethod
    def is_valid_NCHLT5(self,x):
        """Number of own children under age 5 in household"""
        return True
    @classmethod
    def is_valid_NSIBS(self,x):
        """Number of own siblings in household"""
        return True
    @classmethod
    def is_valid_ELDCH(self,x):
        """Age of eldest own child in household"""
        return True
    @classmethod
    def is_valid_YNGCH(self,x):
        """Age of youngest own child in household"""
        return True
    @classmethod
    def is_valid_RELATE(self,x):
        """Relationship to household head [general version]"""
        return True
    @classmethod
    def is_valid_RELATED(self,x):
        """Relationship to household head [detailed version]"""
        return True
    @classmethod
    def is_valid_SEX(self,x):
        """Sex"""
        return True
    @classmethod
    def is_valid_AGE(self,x):
        """Age"""
        return True
    @classmethod
    def is_valid_AGEMONTH(self,x):
        """Age in months"""
        return True
    @classmethod
    def is_valid_MARST(self,x):
        """Marital status"""
        return True
    @classmethod
    def is_valid_MARRNO(self,x):
        """Times married"""
        return True
    @classmethod
    def is_valid_AGEMARR(self,x):
        """Age at first marriage"""
        return True
    @classmethod
    def is_valid_CHBORN(self,x):
        """Children ever born"""
        return True
    @classmethod
    def is_valid_RACE(self,x):
        """Race [general version]"""
        return True
    @classmethod
    def is_valid_RACED(self,x):
        """Race [detailed version]"""
        return True
    @classmethod
    def is_valid_HISPAN(self,x):
        """Hispanic origin [general version]"""
        return True
    @classmethod
    def is_valid_HISPAND(self,x):
        """Hispanic origin [detailed version]"""
        return True
    @classmethod
    def is_valid_BPL(self,x):
        """Birthplace [general version]"""
        return True
    @classmethod
    def is_valid_BPLD(self,x):
        """Birthplace [detailed version]"""
        return True
    @classmethod
    def is_valid_MBPL(self,x):
        """Mother's birthplace [general version]"""
        return True
    @classmethod
    def is_valid_MBPLD(self,x):
        """Mother's birthplace [detailed version]"""
        return True
    @classmethod
    def is_valid_FBPL(self,x):
        """Father's birthplace [general version]"""
        return True
    @classmethod
    def is_valid_FBPLD(self,x):
        """Father's birthplace [detailed version]"""
        return True
    @classmethod
    def is_valid_NATIVITY(self,x):
        """Foreign birthplace or parentage"""
        return True
    @classmethod
    def is_valid_CITIZEN(self,x):
        """Citizenship status"""
        return True
    @classmethod
    def is_valid_MTONGUE(self,x):
        """Mother tongue [general version]"""
        return True
    @classmethod
    def is_valid_MTONGUED(self,x):
        """Mother tongue [detailed version]"""
        return True
    @classmethod
    def is_valid_SPANNAME(self,x):
        """Spanish surname"""
        return True
    @classmethod
    def is_valid_HISPRULE(self,x):
        """Hispanic origin rule"""
        return True
    @classmethod
    def is_valid_SCHOOL(self,x):
        """School attendance"""
        return True
    @classmethod
    def is_valid_HIGRADE(self,x):
        """Highest grade of schooling [general version]"""
        return True
    @classmethod
    def is_valid_HIGRADED(self,x):
        """Highest grade of schooling [detailed version]"""
        return True
    @classmethod
    def is_valid_EDUC(self,x):
        """Educational attainment [general version]"""
        return True
    @classmethod
    def is_valid_EDUCD(self,x):
        """Educational attainment [detailed version]"""
        return True
    @classmethod
    def is_valid_EMPSTAT(self,x):
        """Employment status [general version]"""
        return True
    @classmethod
    def is_valid_EMPSTATD(self,x):
        """Employment status [detailed version]"""
        return True
    @classmethod
    def is_valid_LABFORCE(self,x):
        """Labor force status"""
        return True
    @classmethod
    def is_valid_OCC(self,x):
        """Occupation"""
        return True
    @classmethod
    def is_valid_OCC1950(self,x):
        """Occupation, 1950 basis"""
        return True
    @classmethod
    def is_valid_IND(self,x):
        """Industry"""
        return True
    @classmethod
    def is_valid_IND1950(self,x):
        """Industry, 1950 basis"""
        return True
    @classmethod
    def is_valid_CLASSWKR(self,x):
        """Class of worker [general version]"""
        return True
    @classmethod
    def is_valid_CLASSWKRD(self,x):
        """Class of worker [detailed version]"""
        return True
    @classmethod
    def is_valid_WKSWORK1(self,x):
        """Weeks worked last year"""
        return True
    @classmethod
    def is_valid_WKSWORK2(self,x):
        """Weeks worked last year, intervalled"""
        return True
    @classmethod
    def is_valid_HRSWORK1(self,x):
        """Hours worked last week"""
        return True
    @classmethod
    def is_valid_HRSWORK2(self,x):
        """Hours worked last week, intervalled"""
        return True
    @classmethod
    def is_valid_DURUNEMP(self,x):
        """Continuous weeks unemployed"""
        return True
    @classmethod
    def is_valid_UOCC(self,x):
        """Usual occupation"""
        return True
    @classmethod
    def is_valid_UOCC95(self,x):
        """Usual occupation, 1950 classification"""
        return True
    @classmethod
    def is_valid_UIND(self,x):
        """Usual industry"""
        return True
    @classmethod
    def is_valid_UCLASSWK(self,x):
        """Usual class of worker"""
        return True
    @classmethod
    def is_valid_INCWAGE(self,x):
        """Wage and salary income"""
        return True
    @classmethod
    def is_valid_INCNONWG(self,x):
        """Had non-wage/salary income over $50"""
        return True
    @classmethod
    def is_valid_OCCSCORE(self,x):
        """Occupational income score"""
        return True
    @classmethod
    def is_valid_SEI(self,x):
        """Duncan Socioeconomic Index"""
        return True
    @classmethod
    def is_valid_PRESGL(self,x):
        """Occupational prestige score, Siegel"""
        return True
    @classmethod
    def is_valid_ERSCOR50(self,x):
        """Occupational earnings score, 1950 basis"""
        return True
    @classmethod
    def is_valid_EDSCOR50(self,x):
        """Occupational education score, 1950 basis"""
        return True
    @classmethod
    def is_valid_NPBOSS50(self,x):
        """Nam-Powers-Boyd occupational status score, 1950 basis"""
        return True
    @classmethod
    def is_valid_MIGRATE5(self,x):
        """Migration status, 5 years [general version]"""
        return True
    @classmethod
    def is_valid_MIGRATE5D(self,x):
        """Migration status, 5 years [detailed version]"""
        return True
    @classmethod
    def is_valid_MIGPLAC5(self,x):
        """State or country of residence 5 years ago"""
        return True
    @classmethod
    def is_valid_MIGMET5(self,x):
        """Metropolitan area of residence 5 years ago"""
        return True
    @classmethod
    def is_valid_MIGTYPE5(self,x):
        """Metropolitan status 5 years ago"""
        return True
    @classmethod
    def is_valid_MIGCITY5(self,x):
        """City of residence 5 years ago"""
        return True
    @classmethod
    def is_valid_MIGSEA5(self,x):
        """SEA of residence 5 years ago"""
        return True
    @classmethod
    def is_valid_SAMEPLAC(self,x):
        """Lived same incorporated place 5 years ago"""
        return True
    @classmethod
    def is_valid_SAMESEA5(self,x):
        """Lived same SEA 5 years ago"""
        return True
    @classmethod
    def is_valid_MIGCOUNTY(self,x):
        """County of residence 5 years ago"""
        return True
    @classmethod
    def is_valid_VETSTAT(self,x):
        """Veteran status [general version]"""
        return True
    @classmethod
    def is_valid_VETSTATD(self,x):
        """Veteran status [detailed version]"""
        return True
    @classmethod
    def is_valid_VET1940(self,x):
        """Veteran status, 1940"""
        return True
    @classmethod
    def is_valid_VETWWI(self,x):
        """Veteran, served during WWI era"""
        return True
    @classmethod
    def is_valid_VETPER(self,x):
        """Veteran period of service, 1940"""
        return True
    @classmethod
    def is_valid_VETCHILD(self,x):
        """Mortality status of child's veteran father"""
        return True
    @classmethod
    def is_valid_HISTID(self,x):
        """Consistent historical data person identifier"""
        return True
    @classmethod
    def is_valid_SURSIM(self,x):
        """Surname similarity"""
        return True
    @classmethod
    def is_valid_SSENROLL(self,x):
        """Social Security enrollment"""
        return True

    @classmethod
    def validate_pipe_delimited(self,x):
        fields = x.split('|')
        if len(fields)!=102: return False
        if is_valid_RECTYPE(fields[1]) == False: return False
        if is_valid_YEAR(fields[2]) == False: return False
        if is_valid_DATANUM(fields[3]) == False: return False
        if is_valid_SERIAL(fields[4]) == False: return False
        if is_valid_PERNUM(fields[5]) == False: return False
        if is_valid_PERWT(fields[6]) == False: return False
        if is_valid_SLWT(fields[7]) == False: return False
        if is_valid_SLREC(fields[8]) == False: return False
        if is_valid_RESPONDT(fields[9]) == False: return False
        if is_valid_FAMUNIT(fields[10]) == False: return False
        if is_valid_FAMSIZE(fields[11]) == False: return False
        if is_valid_SUBFAM(fields[12]) == False: return False
        if is_valid_SFTYPE(fields[13]) == False: return False
        if is_valid_SFRELATE(fields[14]) == False: return False
        if is_valid_MOMLOC(fields[15]) == False: return False
        if is_valid_STEPMOM(fields[16]) == False: return False
        if is_valid_MOMRULE_HIST(fields[17]) == False: return False
        if is_valid_POPLOC(fields[18]) == False: return False
        if is_valid_STEPPOP(fields[19]) == False: return False
        if is_valid_POPRULE_HIST(fields[20]) == False: return False
        if is_valid_SPLOC(fields[21]) == False: return False
        if is_valid_SPRULE_HIST(fields[22]) == False: return False
        if is_valid_NCHILD(fields[23]) == False: return False
        if is_valid_NCHLT5(fields[24]) == False: return False
        if is_valid_NSIBS(fields[25]) == False: return False
        if is_valid_ELDCH(fields[26]) == False: return False
        if is_valid_YNGCH(fields[27]) == False: return False
        if is_valid_RELATE(fields[28]) == False: return False
        if is_valid_RELATED(fields[29]) == False: return False
        if is_valid_SEX(fields[30]) == False: return False
        if is_valid_AGE(fields[31]) == False: return False
        if is_valid_AGEMONTH(fields[32]) == False: return False
        if is_valid_MARST(fields[33]) == False: return False
        if is_valid_MARRNO(fields[34]) == False: return False
        if is_valid_AGEMARR(fields[35]) == False: return False
        if is_valid_CHBORN(fields[36]) == False: return False
        if is_valid_RACE(fields[37]) == False: return False
        if is_valid_RACED(fields[38]) == False: return False
        if is_valid_HISPAN(fields[39]) == False: return False
        if is_valid_HISPAND(fields[40]) == False: return False
        if is_valid_BPL(fields[41]) == False: return False
        if is_valid_BPLD(fields[42]) == False: return False
        if is_valid_MBPL(fields[43]) == False: return False
        if is_valid_MBPLD(fields[44]) == False: return False
        if is_valid_FBPL(fields[45]) == False: return False
        if is_valid_FBPLD(fields[46]) == False: return False
        if is_valid_NATIVITY(fields[47]) == False: return False
        if is_valid_CITIZEN(fields[48]) == False: return False
        if is_valid_MTONGUE(fields[49]) == False: return False
        if is_valid_MTONGUED(fields[50]) == False: return False
        if is_valid_SPANNAME(fields[51]) == False: return False
        if is_valid_HISPRULE(fields[52]) == False: return False
        if is_valid_SCHOOL(fields[53]) == False: return False
        if is_valid_HIGRADE(fields[54]) == False: return False
        if is_valid_HIGRADED(fields[55]) == False: return False
        if is_valid_EDUC(fields[56]) == False: return False
        if is_valid_EDUCD(fields[57]) == False: return False
        if is_valid_EMPSTAT(fields[58]) == False: return False
        if is_valid_EMPSTATD(fields[59]) == False: return False
        if is_valid_LABFORCE(fields[60]) == False: return False
        if is_valid_OCC(fields[61]) == False: return False
        if is_valid_OCC1950(fields[62]) == False: return False
        if is_valid_IND(fields[63]) == False: return False
        if is_valid_IND1950(fields[64]) == False: return False
        if is_valid_CLASSWKR(fields[65]) == False: return False
        if is_valid_CLASSWKRD(fields[66]) == False: return False
        if is_valid_WKSWORK1(fields[67]) == False: return False
        if is_valid_WKSWORK2(fields[68]) == False: return False
        if is_valid_HRSWORK1(fields[69]) == False: return False
        if is_valid_HRSWORK2(fields[70]) == False: return False
        if is_valid_DURUNEMP(fields[71]) == False: return False
        if is_valid_UOCC(fields[72]) == False: return False
        if is_valid_UOCC95(fields[73]) == False: return False
        if is_valid_UIND(fields[74]) == False: return False
        if is_valid_UCLASSWK(fields[75]) == False: return False
        if is_valid_INCWAGE(fields[76]) == False: return False
        if is_valid_INCNONWG(fields[77]) == False: return False
        if is_valid_OCCSCORE(fields[78]) == False: return False
        if is_valid_SEI(fields[79]) == False: return False
        if is_valid_PRESGL(fields[80]) == False: return False
        if is_valid_ERSCOR50(fields[81]) == False: return False
        if is_valid_EDSCOR50(fields[82]) == False: return False
        if is_valid_NPBOSS50(fields[83]) == False: return False
        if is_valid_MIGRATE5(fields[84]) == False: return False
        if is_valid_MIGRATE5D(fields[85]) == False: return False
        if is_valid_MIGPLAC5(fields[86]) == False: return False
        if is_valid_MIGMET5(fields[87]) == False: return False
        if is_valid_MIGTYPE5(fields[88]) == False: return False
        if is_valid_MIGCITY5(fields[89]) == False: return False
        if is_valid_MIGSEA5(fields[90]) == False: return False
        if is_valid_SAMEPLAC(fields[91]) == False: return False
        if is_valid_SAMESEA5(fields[92]) == False: return False
        if is_valid_MIGCOUNTY(fields[93]) == False: return False
        if is_valid_VETSTAT(fields[94]) == False: return False
        if is_valid_VETSTATD(fields[95]) == False: return False
        if is_valid_VET1940(fields[96]) == False: return False
        if is_valid_VETWWI(fields[97]) == False: return False
        if is_valid_VETPER(fields[98]) == False: return False
        if is_valid_VETCHILD(fields[99]) == False: return False
        if is_valid_HISTID(fields[100]) == False: return False
        if is_valid_SURSIM(fields[101]) == False: return False
        if is_valid_SSENROLL(fields[102]) == False: return False
        return True

class P:
    __slots__ = ['RECTYPE', 'YEAR', 'DATANUM', 'SERIAL', 'PERNUM', 'PERWT', 'SLWT', 'SLREC', 'RESPONDT', 'FAMUNIT', 'FAMSIZE', 'SUBFAM', 'SFTYPE', 'SFRELATE', 'MOMLOC', 'STEPMOM', 'MOMRULE_HIST', 'POPLOC', 'STEPPOP', 'POPRULE_HIST', 'SPLOC', 'SPRULE_HIST', 'NCHILD', 'NCHLT5', 'NSIBS', 'ELDCH', 'YNGCH', 'RELATE', 'RELATED', 'SEX', 'AGE', 'AGEMONTH', 'MARST', 'MARRNO', 'AGEMARR', 'CHBORN', 'RACE', 'RACED', 'HISPAN', 'HISPAND', 'BPL', 'BPLD', 'MBPL', 'MBPLD', 'FBPL', 'FBPLD', 'NATIVITY', 'CITIZEN', 'MTONGUE', 'MTONGUED', 'SPANNAME', 'HISPRULE', 'SCHOOL', 'HIGRADE', 'HIGRADED', 'EDUC', 'EDUCD', 'EMPSTAT', 'EMPSTATD', 'LABFORCE', 'OCC', 'OCC1950', 'IND', 'IND1950', 'CLASSWKR', 'CLASSWKRD', 'WKSWORK1', 'WKSWORK2', 'HRSWORK1', 'HRSWORK2', 'DURUNEMP', 'UOCC', 'UOCC95', 'UIND', 'UCLASSWK', 'INCWAGE', 'INCNONWG', 'OCCSCORE', 'SEI', 'PRESGL', 'ERSCOR50', 'EDSCOR50', 'NPBOSS50', 'MIGRATE5', 'MIGRATE5D', 'MIGPLAC5', 'MIGMET5', 'MIGTYPE5', 'MIGCITY5', 'MIGSEA5', 'SAMEPLAC', 'SAMESEA5', 'MIGCOUNTY', 'VETSTAT', 'VETSTATD', 'VET1940', 'VETWWI', 'VETPER', 'VETCHILD', 'HISTID', 'SURSIM', 'SSENROLL']
    def __repr__(self):
        return 'P<RECTYPE:{},YEAR:{},DATANUM:{},SERIAL:{},PERNUM:{},PERWT:{},SLWT:{},SLREC:{},RESPONDT:{},FAMUNIT:{},FAMSIZE:{},SUBFAM:{},SFTYPE:{},SFRELATE:{},MOMLOC:{},STEPMOM:{},MOMRULE_HIST:{},POPLOC:{},STEPPOP:{},POPRULE_HIST:{},SPLOC:{},SPRULE_HIST:{},NCHILD:{},NCHLT5:{},NSIBS:{},ELDCH:{},YNGCH:{},RELATE:{},RELATED:{},SEX:{},AGE:{},AGEMONTH:{},MARST:{},MARRNO:{},AGEMARR:{},CHBORN:{},RACE:{},RACED:{},HISPAN:{},HISPAND:{},BPL:{},BPLD:{},MBPL:{},MBPLD:{},FBPL:{},FBPLD:{},NATIVITY:{},CITIZEN:{},MTONGUE:{},MTONGUED:{},SPANNAME:{},HISPRULE:{},SCHOOL:{},HIGRADE:{},HIGRADED:{},EDUC:{},EDUCD:{},EMPSTAT:{},EMPSTATD:{},LABFORCE:{},OCC:{},OCC1950:{},IND:{},IND1950:{},CLASSWKR:{},CLASSWKRD:{},WKSWORK1:{},WKSWORK2:{},HRSWORK1:{},HRSWORK2:{},DURUNEMP:{},UOCC:{},UOCC95:{},UIND:{},UCLASSWK:{},INCWAGE:{},INCNONWG:{},OCCSCORE:{},SEI:{},PRESGL:{},ERSCOR50:{},EDSCOR50:{},NPBOSS50:{},MIGRATE5:{},MIGRATE5D:{},MIGPLAC5:{},MIGMET5:{},MIGTYPE5:{},MIGCITY5:{},MIGSEA5:{},SAMEPLAC:{},SAMESEA5:{},MIGCOUNTY:{},VETSTAT:{},VETSTATD:{},VET1940:{},VETWWI:{},VETPER:{},VETCHILD:{},HISTID:{},SURSIM:{},SSENROLL:{}>'.format(self.RECTYPE,self.YEAR,self.DATANUM,self.SERIAL,self.PERNUM,self.PERWT,self.SLWT,self.SLREC,self.RESPONDT,self.FAMUNIT,self.FAMSIZE,self.SUBFAM,self.SFTYPE,self.SFRELATE,self.MOMLOC,self.STEPMOM,self.MOMRULE_HIST,self.POPLOC,self.STEPPOP,self.POPRULE_HIST,self.SPLOC,self.SPRULE_HIST,self.NCHILD,self.NCHLT5,self.NSIBS,self.ELDCH,self.YNGCH,self.RELATE,self.RELATED,self.SEX,self.AGE,self.AGEMONTH,self.MARST,self.MARRNO,self.AGEMARR,self.CHBORN,self.RACE,self.RACED,self.HISPAN,self.HISPAND,self.BPL,self.BPLD,self.MBPL,self.MBPLD,self.FBPL,self.FBPLD,self.NATIVITY,self.CITIZEN,self.MTONGUE,self.MTONGUED,self.SPANNAME,self.HISPRULE,self.SCHOOL,self.HIGRADE,self.HIGRADED,self.EDUC,self.EDUCD,self.EMPSTAT,self.EMPSTATD,self.LABFORCE,self.OCC,self.OCC1950,self.IND,self.IND1950,self.CLASSWKR,self.CLASSWKRD,self.WKSWORK1,self.WKSWORK2,self.HRSWORK1,self.HRSWORK2,self.DURUNEMP,self.UOCC,self.UOCC95,self.UIND,self.UCLASSWK,self.INCWAGE,self.INCNONWG,self.OCCSCORE,self.SEI,self.PRESGL,self.ERSCOR50,self.EDSCOR50,self.NPBOSS50,self.MIGRATE5,self.MIGRATE5D,self.MIGPLAC5,self.MIGMET5,self.MIGTYPE5,self.MIGCITY5,self.MIGSEA5,self.SAMEPLAC,self.SAMESEA5,self.MIGCOUNTY,self.VETSTAT,self.VETSTATD,self.VET1940,self.VETWWI,self.VETPER,self.VETCHILD,self.HISTID,self.SURSIM,self.SSENROLL)
    def __init__(self,line=None):
        if line:
            if '|' in line:
                self.parse_pipe_delimited(line)
            else:
                self.parse_column_specified(line)
    @classmethod
    def name(self):
        return 'P'

    def parse_pipe_delimited(self,line):
        fields = line.split('|')
        if len(fields)!=102:
            raise ValueError(f'expected 102 fields, found {len(fields)}')
        self.RECTYPE = fields[0]
        self.YEAR = fields[1]
        self.DATANUM = fields[2]
        self.SERIAL = fields[3]
        self.PERNUM = fields[4]
        self.PERWT = fields[5]
        self.SLWT = fields[6]
        self.SLREC = fields[7]
        self.RESPONDT = fields[8]
        self.FAMUNIT = fields[9]
        self.FAMSIZE = fields[10]
        self.SUBFAM = fields[11]
        self.SFTYPE = fields[12]
        self.SFRELATE = fields[13]
        self.MOMLOC = fields[14]
        self.STEPMOM = fields[15]
        self.MOMRULE_HIST = fields[16]
        self.POPLOC = fields[17]
        self.STEPPOP = fields[18]
        self.POPRULE_HIST = fields[19]
        self.SPLOC = fields[20]
        self.SPRULE_HIST = fields[21]
        self.NCHILD = fields[22]
        self.NCHLT5 = fields[23]
        self.NSIBS = fields[24]
        self.ELDCH = fields[25]
        self.YNGCH = fields[26]
        self.RELATE = fields[27]
        self.RELATED = fields[28]
        self.SEX = fields[29]
        self.AGE = fields[30]
        self.AGEMONTH = fields[31]
        self.MARST = fields[32]
        self.MARRNO = fields[33]
        self.AGEMARR = fields[34]
        self.CHBORN = fields[35]
        self.RACE = fields[36]
        self.RACED = fields[37]
        self.HISPAN = fields[38]
        self.HISPAND = fields[39]
        self.BPL = fields[40]
        self.BPLD = fields[41]
        self.MBPL = fields[42]
        self.MBPLD = fields[43]
        self.FBPL = fields[44]
        self.FBPLD = fields[45]
        self.NATIVITY = fields[46]
        self.CITIZEN = fields[47]
        self.MTONGUE = fields[48]
        self.MTONGUED = fields[49]
        self.SPANNAME = fields[50]
        self.HISPRULE = fields[51]
        self.SCHOOL = fields[52]
        self.HIGRADE = fields[53]
        self.HIGRADED = fields[54]
        self.EDUC = fields[55]
        self.EDUCD = fields[56]
        self.EMPSTAT = fields[57]
        self.EMPSTATD = fields[58]
        self.LABFORCE = fields[59]
        self.OCC = fields[60]
        self.OCC1950 = fields[61]
        self.IND = fields[62]
        self.IND1950 = fields[63]
        self.CLASSWKR = fields[64]
        self.CLASSWKRD = fields[65]
        self.WKSWORK1 = fields[66]
        self.WKSWORK2 = fields[67]
        self.HRSWORK1 = fields[68]
        self.HRSWORK2 = fields[69]
        self.DURUNEMP = fields[70]
        self.UOCC = fields[71]
        self.UOCC95 = fields[72]
        self.UIND = fields[73]
        self.UCLASSWK = fields[74]
        self.INCWAGE = fields[75]
        self.INCNONWG = fields[76]
        self.OCCSCORE = fields[77]
        self.SEI = fields[78]
        self.PRESGL = fields[79]
        self.ERSCOR50 = fields[80]
        self.EDSCOR50 = fields[81]
        self.NPBOSS50 = fields[82]
        self.MIGRATE5 = fields[83]
        self.MIGRATE5D = fields[84]
        self.MIGPLAC5 = fields[85]
        self.MIGMET5 = fields[86]
        self.MIGTYPE5 = fields[87]
        self.MIGCITY5 = fields[88]
        self.MIGSEA5 = fields[89]
        self.SAMEPLAC = fields[90]
        self.SAMESEA5 = fields[91]
        self.MIGCOUNTY = fields[92]
        self.VETSTAT = fields[93]
        self.VETSTATD = fields[94]
        self.VET1940 = fields[95]
        self.VETWWI = fields[96]
        self.VETPER = fields[97]
        self.VETCHILD = fields[98]
        self.HISTID = fields[99]
        self.SURSIM = fields[100]
        self.SSENROLL = fields[101]

    def parse_column_specified(self,line):
        self.RECTYPE = line[0:1]
        self.YEAR = line[1:5]
        self.DATANUM = line[5:7]
        self.SERIAL = line[7:15]
        self.PERNUM = line[15:19]
        self.PERWT = line[19:29]
        self.SLWT = line[29:39]
        self.SLREC = line[39:40]
        self.RESPONDT = line[40:41]
        self.FAMUNIT = line[41:43]
        self.FAMSIZE = line[43:45]
        self.SUBFAM = line[45:46]
        self.SFTYPE = line[46:47]
        self.SFRELATE = line[47:48]
        self.MOMLOC = line[48:50]
        self.STEPMOM = line[50:51]
        self.MOMRULE_HIST = line[51:52]
        self.POPLOC = line[52:54]
        self.STEPPOP = line[54:55]
        self.POPRULE_HIST = line[55:56]
        self.SPLOC = line[56:58]
        self.SPRULE_HIST = line[58:59]
        self.NCHILD = line[59:60]
        self.NCHLT5 = line[60:61]
        self.NSIBS = line[61:62]
        self.ELDCH = line[62:64]
        self.YNGCH = line[64:66]
        self.RELATE = line[66:68]
        self.RELATED = line[68:72]
        self.SEX = line[72:73]
        self.AGE = line[73:76]
        self.AGEMONTH = line[76:78]
        self.MARST = line[78:79]
        self.MARRNO = line[79:80]
        self.AGEMARR = line[80:82]
        self.CHBORN = line[82:84]
        self.RACE = line[84:85]
        self.RACED = line[85:88]
        self.HISPAN = line[88:89]
        self.HISPAND = line[89:92]
        self.BPL = line[92:95]
        self.BPLD = line[95:100]
        self.MBPL = line[100:103]
        self.MBPLD = line[103:108]
        self.FBPL = line[108:111]
        self.FBPLD = line[111:116]
        self.NATIVITY = line[116:117]
        self.CITIZEN = line[117:118]
        self.MTONGUE = line[118:120]
        self.MTONGUED = line[120:124]
        self.SPANNAME = line[124:125]
        self.HISPRULE = line[125:126]
        self.SCHOOL = line[126:127]
        self.HIGRADE = line[127:129]
        self.HIGRADED = line[129:132]
        self.EDUC = line[132:134]
        self.EDUCD = line[134:137]
        self.EMPSTAT = line[137:138]
        self.EMPSTATD = line[138:140]
        self.LABFORCE = line[140:141]
        self.OCC = line[141:145]
        self.OCC1950 = line[145:148]
        self.IND = line[148:152]
        self.IND1950 = line[152:155]
        self.CLASSWKR = line[155:156]
        self.CLASSWKRD = line[156:158]
        self.WKSWORK1 = line[158:160]
        self.WKSWORK2 = line[160:161]
        self.HRSWORK1 = line[161:163]
        self.HRSWORK2 = line[163:164]
        self.DURUNEMP = line[164:167]
        self.UOCC = line[167:170]
        self.UOCC95 = line[170:173]
        self.UIND = line[173:176]
        self.UCLASSWK = line[176:177]
        self.INCWAGE = line[177:183]
        self.INCNONWG = line[183:184]
        self.OCCSCORE = line[184:186]
        self.SEI = line[186:188]
        self.PRESGL = line[188:191]
        self.ERSCOR50 = line[191:195]
        self.EDSCOR50 = line[195:199]
        self.NPBOSS50 = line[199:203]
        self.MIGRATE5 = line[203:204]
        self.MIGRATE5D = line[204:206]
        self.MIGPLAC5 = line[206:209]
        self.MIGMET5 = line[209:213]
        self.MIGTYPE5 = line[213:214]
        self.MIGCITY5 = line[214:218]
        self.MIGSEA5 = line[218:221]
        self.SAMEPLAC = line[221:222]
        self.SAMESEA5 = line[222:223]
        self.MIGCOUNTY = line[223:227]
        self.VETSTAT = line[227:228]
        self.VETSTATD = line[228:230]
        self.VET1940 = line[230:231]
        self.VETWWI = line[231:232]
        self.VETPER = line[232:233]
        self.VETCHILD = line[233:234]
        self.HISTID = line[234:270]
        self.SURSIM = line[270:272]
        self.SSENROLL = line[272:273]

    def validate(self):
        """Return True if the object data validates"""
        if not P_validator.is_valid_RECTYPE(self.RECTYPE): return False
        if not P_validator.is_valid_YEAR(self.YEAR): return False
        if not P_validator.is_valid_DATANUM(self.DATANUM): return False
        if not P_validator.is_valid_SERIAL(self.SERIAL): return False
        if not P_validator.is_valid_PERNUM(self.PERNUM): return False
        if not P_validator.is_valid_PERWT(self.PERWT): return False
        if not P_validator.is_valid_SLWT(self.SLWT): return False
        if not P_validator.is_valid_SLREC(self.SLREC): return False
        if not P_validator.is_valid_RESPONDT(self.RESPONDT): return False
        if not P_validator.is_valid_FAMUNIT(self.FAMUNIT): return False
        if not P_validator.is_valid_FAMSIZE(self.FAMSIZE): return False
        if not P_validator.is_valid_SUBFAM(self.SUBFAM): return False
        if not P_validator.is_valid_SFTYPE(self.SFTYPE): return False
        if not P_validator.is_valid_SFRELATE(self.SFRELATE): return False
        if not P_validator.is_valid_MOMLOC(self.MOMLOC): return False
        if not P_validator.is_valid_STEPMOM(self.STEPMOM): return False
        if not P_validator.is_valid_MOMRULE_HIST(self.MOMRULE_HIST): return False
        if not P_validator.is_valid_POPLOC(self.POPLOC): return False
        if not P_validator.is_valid_STEPPOP(self.STEPPOP): return False
        if not P_validator.is_valid_POPRULE_HIST(self.POPRULE_HIST): return False
        if not P_validator.is_valid_SPLOC(self.SPLOC): return False
        if not P_validator.is_valid_SPRULE_HIST(self.SPRULE_HIST): return False
        if not P_validator.is_valid_NCHILD(self.NCHILD): return False
        if not P_validator.is_valid_NCHLT5(self.NCHLT5): return False
        if not P_validator.is_valid_NSIBS(self.NSIBS): return False
        if not P_validator.is_valid_ELDCH(self.ELDCH): return False
        if not P_validator.is_valid_YNGCH(self.YNGCH): return False
        if not P_validator.is_valid_RELATE(self.RELATE): return False
        if not P_validator.is_valid_RELATED(self.RELATED): return False
        if not P_validator.is_valid_SEX(self.SEX): return False
        if not P_validator.is_valid_AGE(self.AGE): return False
        if not P_validator.is_valid_AGEMONTH(self.AGEMONTH): return False
        if not P_validator.is_valid_MARST(self.MARST): return False
        if not P_validator.is_valid_MARRNO(self.MARRNO): return False
        if not P_validator.is_valid_AGEMARR(self.AGEMARR): return False
        if not P_validator.is_valid_CHBORN(self.CHBORN): return False
        if not P_validator.is_valid_RACE(self.RACE): return False
        if not P_validator.is_valid_RACED(self.RACED): return False
        if not P_validator.is_valid_HISPAN(self.HISPAN): return False
        if not P_validator.is_valid_HISPAND(self.HISPAND): return False
        if not P_validator.is_valid_BPL(self.BPL): return False
        if not P_validator.is_valid_BPLD(self.BPLD): return False
        if not P_validator.is_valid_MBPL(self.MBPL): return False
        if not P_validator.is_valid_MBPLD(self.MBPLD): return False
        if not P_validator.is_valid_FBPL(self.FBPL): return False
        if not P_validator.is_valid_FBPLD(self.FBPLD): return False
        if not P_validator.is_valid_NATIVITY(self.NATIVITY): return False
        if not P_validator.is_valid_CITIZEN(self.CITIZEN): return False
        if not P_validator.is_valid_MTONGUE(self.MTONGUE): return False
        if not P_validator.is_valid_MTONGUED(self.MTONGUED): return False
        if not P_validator.is_valid_SPANNAME(self.SPANNAME): return False
        if not P_validator.is_valid_HISPRULE(self.HISPRULE): return False
        if not P_validator.is_valid_SCHOOL(self.SCHOOL): return False
        if not P_validator.is_valid_HIGRADE(self.HIGRADE): return False
        if not P_validator.is_valid_HIGRADED(self.HIGRADED): return False
        if not P_validator.is_valid_EDUC(self.EDUC): return False
        if not P_validator.is_valid_EDUCD(self.EDUCD): return False
        if not P_validator.is_valid_EMPSTAT(self.EMPSTAT): return False
        if not P_validator.is_valid_EMPSTATD(self.EMPSTATD): return False
        if not P_validator.is_valid_LABFORCE(self.LABFORCE): return False
        if not P_validator.is_valid_OCC(self.OCC): return False
        if not P_validator.is_valid_OCC1950(self.OCC1950): return False
        if not P_validator.is_valid_IND(self.IND): return False
        if not P_validator.is_valid_IND1950(self.IND1950): return False
        if not P_validator.is_valid_CLASSWKR(self.CLASSWKR): return False
        if not P_validator.is_valid_CLASSWKRD(self.CLASSWKRD): return False
        if not P_validator.is_valid_WKSWORK1(self.WKSWORK1): return False
        if not P_validator.is_valid_WKSWORK2(self.WKSWORK2): return False
        if not P_validator.is_valid_HRSWORK1(self.HRSWORK1): return False
        if not P_validator.is_valid_HRSWORK2(self.HRSWORK2): return False
        if not P_validator.is_valid_DURUNEMP(self.DURUNEMP): return False
        if not P_validator.is_valid_UOCC(self.UOCC): return False
        if not P_validator.is_valid_UOCC95(self.UOCC95): return False
        if not P_validator.is_valid_UIND(self.UIND): return False
        if not P_validator.is_valid_UCLASSWK(self.UCLASSWK): return False
        if not P_validator.is_valid_INCWAGE(self.INCWAGE): return False
        if not P_validator.is_valid_INCNONWG(self.INCNONWG): return False
        if not P_validator.is_valid_OCCSCORE(self.OCCSCORE): return False
        if not P_validator.is_valid_SEI(self.SEI): return False
        if not P_validator.is_valid_PRESGL(self.PRESGL): return False
        if not P_validator.is_valid_ERSCOR50(self.ERSCOR50): return False
        if not P_validator.is_valid_EDSCOR50(self.EDSCOR50): return False
        if not P_validator.is_valid_NPBOSS50(self.NPBOSS50): return False
        if not P_validator.is_valid_MIGRATE5(self.MIGRATE5): return False
        if not P_validator.is_valid_MIGRATE5D(self.MIGRATE5D): return False
        if not P_validator.is_valid_MIGPLAC5(self.MIGPLAC5): return False
        if not P_validator.is_valid_MIGMET5(self.MIGMET5): return False
        if not P_validator.is_valid_MIGTYPE5(self.MIGTYPE5): return False
        if not P_validator.is_valid_MIGCITY5(self.MIGCITY5): return False
        if not P_validator.is_valid_MIGSEA5(self.MIGSEA5): return False
        if not P_validator.is_valid_SAMEPLAC(self.SAMEPLAC): return False
        if not P_validator.is_valid_SAMESEA5(self.SAMESEA5): return False
        if not P_validator.is_valid_MIGCOUNTY(self.MIGCOUNTY): return False
        if not P_validator.is_valid_VETSTAT(self.VETSTAT): return False
        if not P_validator.is_valid_VETSTATD(self.VETSTATD): return False
        if not P_validator.is_valid_VET1940(self.VET1940): return False
        if not P_validator.is_valid_VETWWI(self.VETWWI): return False
        if not P_validator.is_valid_VETPER(self.VETPER): return False
        if not P_validator.is_valid_VETCHILD(self.VETCHILD): return False
        if not P_validator.is_valid_HISTID(self.HISTID): return False
        if not P_validator.is_valid_SURSIM(self.SURSIM): return False
        if not P_validator.is_valid_SSENROLL(self.SSENROLL): return False
        return True

    def validate_reason(self):
        reason=[]
        if not P_validator.is_valid_RECTYPE(self.RECTYPE): reason.append('RECTYPE ('+str(self.RECTYPE)+') out of range ()')
        if not P_validator.is_valid_YEAR(self.YEAR): reason.append('YEAR ('+str(self.YEAR)+') out of range ()')
        if not P_validator.is_valid_DATANUM(self.DATANUM): reason.append('DATANUM ('+str(self.DATANUM)+') out of range ()')
        if not P_validator.is_valid_SERIAL(self.SERIAL): reason.append('SERIAL ('+str(self.SERIAL)+') out of range ()')
        if not P_validator.is_valid_PERNUM(self.PERNUM): reason.append('PERNUM ('+str(self.PERNUM)+') out of range ()')
        if not P_validator.is_valid_PERWT(self.PERWT): reason.append('PERWT ('+str(self.PERWT)+') out of range ()')
        if not P_validator.is_valid_SLWT(self.SLWT): reason.append('SLWT ('+str(self.SLWT)+') out of range ()')
        if not P_validator.is_valid_SLREC(self.SLREC): reason.append('SLREC ('+str(self.SLREC)+') out of range ()')
        if not P_validator.is_valid_RESPONDT(self.RESPONDT): reason.append('RESPONDT ('+str(self.RESPONDT)+') out of range ()')
        if not P_validator.is_valid_FAMUNIT(self.FAMUNIT): reason.append('FAMUNIT ('+str(self.FAMUNIT)+') out of range ()')
        if not P_validator.is_valid_FAMSIZE(self.FAMSIZE): reason.append('FAMSIZE ('+str(self.FAMSIZE)+') out of range ()')
        if not P_validator.is_valid_SUBFAM(self.SUBFAM): reason.append('SUBFAM ('+str(self.SUBFAM)+') out of range ()')
        if not P_validator.is_valid_SFTYPE(self.SFTYPE): reason.append('SFTYPE ('+str(self.SFTYPE)+') out of range ()')
        if not P_validator.is_valid_SFRELATE(self.SFRELATE): reason.append('SFRELATE ('+str(self.SFRELATE)+') out of range ()')
        if not P_validator.is_valid_MOMLOC(self.MOMLOC): reason.append('MOMLOC ('+str(self.MOMLOC)+') out of range ()')
        if not P_validator.is_valid_STEPMOM(self.STEPMOM): reason.append('STEPMOM ('+str(self.STEPMOM)+') out of range ()')
        if not P_validator.is_valid_MOMRULE_HIST(self.MOMRULE_HIST): reason.append('MOMRULE_HIST ('+str(self.MOMRULE_HIST)+') out of range ()')
        if not P_validator.is_valid_POPLOC(self.POPLOC): reason.append('POPLOC ('+str(self.POPLOC)+') out of range ()')
        if not P_validator.is_valid_STEPPOP(self.STEPPOP): reason.append('STEPPOP ('+str(self.STEPPOP)+') out of range ()')
        if not P_validator.is_valid_POPRULE_HIST(self.POPRULE_HIST): reason.append('POPRULE_HIST ('+str(self.POPRULE_HIST)+') out of range ()')
        if not P_validator.is_valid_SPLOC(self.SPLOC): reason.append('SPLOC ('+str(self.SPLOC)+') out of range ()')
        if not P_validator.is_valid_SPRULE_HIST(self.SPRULE_HIST): reason.append('SPRULE_HIST ('+str(self.SPRULE_HIST)+') out of range ()')
        if not P_validator.is_valid_NCHILD(self.NCHILD): reason.append('NCHILD ('+str(self.NCHILD)+') out of range ()')
        if not P_validator.is_valid_NCHLT5(self.NCHLT5): reason.append('NCHLT5 ('+str(self.NCHLT5)+') out of range ()')
        if not P_validator.is_valid_NSIBS(self.NSIBS): reason.append('NSIBS ('+str(self.NSIBS)+') out of range ()')
        if not P_validator.is_valid_ELDCH(self.ELDCH): reason.append('ELDCH ('+str(self.ELDCH)+') out of range ()')
        if not P_validator.is_valid_YNGCH(self.YNGCH): reason.append('YNGCH ('+str(self.YNGCH)+') out of range ()')
        if not P_validator.is_valid_RELATE(self.RELATE): reason.append('RELATE ('+str(self.RELATE)+') out of range ()')
        if not P_validator.is_valid_RELATED(self.RELATED): reason.append('RELATED ('+str(self.RELATED)+') out of range ()')
        if not P_validator.is_valid_SEX(self.SEX): reason.append('SEX ('+str(self.SEX)+') out of range ()')
        if not P_validator.is_valid_AGE(self.AGE): reason.append('AGE ('+str(self.AGE)+') out of range ()')
        if not P_validator.is_valid_AGEMONTH(self.AGEMONTH): reason.append('AGEMONTH ('+str(self.AGEMONTH)+') out of range ()')
        if not P_validator.is_valid_MARST(self.MARST): reason.append('MARST ('+str(self.MARST)+') out of range ()')
        if not P_validator.is_valid_MARRNO(self.MARRNO): reason.append('MARRNO ('+str(self.MARRNO)+') out of range ()')
        if not P_validator.is_valid_AGEMARR(self.AGEMARR): reason.append('AGEMARR ('+str(self.AGEMARR)+') out of range ()')
        if not P_validator.is_valid_CHBORN(self.CHBORN): reason.append('CHBORN ('+str(self.CHBORN)+') out of range ()')
        if not P_validator.is_valid_RACE(self.RACE): reason.append('RACE ('+str(self.RACE)+') out of range ()')
        if not P_validator.is_valid_RACED(self.RACED): reason.append('RACED ('+str(self.RACED)+') out of range ()')
        if not P_validator.is_valid_HISPAN(self.HISPAN): reason.append('HISPAN ('+str(self.HISPAN)+') out of range ()')
        if not P_validator.is_valid_HISPAND(self.HISPAND): reason.append('HISPAND ('+str(self.HISPAND)+') out of range ()')
        if not P_validator.is_valid_BPL(self.BPL): reason.append('BPL ('+str(self.BPL)+') out of range ()')
        if not P_validator.is_valid_BPLD(self.BPLD): reason.append('BPLD ('+str(self.BPLD)+') out of range ()')
        if not P_validator.is_valid_MBPL(self.MBPL): reason.append('MBPL ('+str(self.MBPL)+') out of range ()')
        if not P_validator.is_valid_MBPLD(self.MBPLD): reason.append('MBPLD ('+str(self.MBPLD)+') out of range ()')
        if not P_validator.is_valid_FBPL(self.FBPL): reason.append('FBPL ('+str(self.FBPL)+') out of range ()')
        if not P_validator.is_valid_FBPLD(self.FBPLD): reason.append('FBPLD ('+str(self.FBPLD)+') out of range ()')
        if not P_validator.is_valid_NATIVITY(self.NATIVITY): reason.append('NATIVITY ('+str(self.NATIVITY)+') out of range ()')
        if not P_validator.is_valid_CITIZEN(self.CITIZEN): reason.append('CITIZEN ('+str(self.CITIZEN)+') out of range ()')
        if not P_validator.is_valid_MTONGUE(self.MTONGUE): reason.append('MTONGUE ('+str(self.MTONGUE)+') out of range ()')
        if not P_validator.is_valid_MTONGUED(self.MTONGUED): reason.append('MTONGUED ('+str(self.MTONGUED)+') out of range ()')
        if not P_validator.is_valid_SPANNAME(self.SPANNAME): reason.append('SPANNAME ('+str(self.SPANNAME)+') out of range ()')
        if not P_validator.is_valid_HISPRULE(self.HISPRULE): reason.append('HISPRULE ('+str(self.HISPRULE)+') out of range ()')
        if not P_validator.is_valid_SCHOOL(self.SCHOOL): reason.append('SCHOOL ('+str(self.SCHOOL)+') out of range ()')
        if not P_validator.is_valid_HIGRADE(self.HIGRADE): reason.append('HIGRADE ('+str(self.HIGRADE)+') out of range ()')
        if not P_validator.is_valid_HIGRADED(self.HIGRADED): reason.append('HIGRADED ('+str(self.HIGRADED)+') out of range ()')
        if not P_validator.is_valid_EDUC(self.EDUC): reason.append('EDUC ('+str(self.EDUC)+') out of range ()')
        if not P_validator.is_valid_EDUCD(self.EDUCD): reason.append('EDUCD ('+str(self.EDUCD)+') out of range ()')
        if not P_validator.is_valid_EMPSTAT(self.EMPSTAT): reason.append('EMPSTAT ('+str(self.EMPSTAT)+') out of range ()')
        if not P_validator.is_valid_EMPSTATD(self.EMPSTATD): reason.append('EMPSTATD ('+str(self.EMPSTATD)+') out of range ()')
        if not P_validator.is_valid_LABFORCE(self.LABFORCE): reason.append('LABFORCE ('+str(self.LABFORCE)+') out of range ()')
        if not P_validator.is_valid_OCC(self.OCC): reason.append('OCC ('+str(self.OCC)+') out of range ()')
        if not P_validator.is_valid_OCC1950(self.OCC1950): reason.append('OCC1950 ('+str(self.OCC1950)+') out of range ()')
        if not P_validator.is_valid_IND(self.IND): reason.append('IND ('+str(self.IND)+') out of range ()')
        if not P_validator.is_valid_IND1950(self.IND1950): reason.append('IND1950 ('+str(self.IND1950)+') out of range ()')
        if not P_validator.is_valid_CLASSWKR(self.CLASSWKR): reason.append('CLASSWKR ('+str(self.CLASSWKR)+') out of range ()')
        if not P_validator.is_valid_CLASSWKRD(self.CLASSWKRD): reason.append('CLASSWKRD ('+str(self.CLASSWKRD)+') out of range ()')
        if not P_validator.is_valid_WKSWORK1(self.WKSWORK1): reason.append('WKSWORK1 ('+str(self.WKSWORK1)+') out of range ()')
        if not P_validator.is_valid_WKSWORK2(self.WKSWORK2): reason.append('WKSWORK2 ('+str(self.WKSWORK2)+') out of range ()')
        if not P_validator.is_valid_HRSWORK1(self.HRSWORK1): reason.append('HRSWORK1 ('+str(self.HRSWORK1)+') out of range ()')
        if not P_validator.is_valid_HRSWORK2(self.HRSWORK2): reason.append('HRSWORK2 ('+str(self.HRSWORK2)+') out of range ()')
        if not P_validator.is_valid_DURUNEMP(self.DURUNEMP): reason.append('DURUNEMP ('+str(self.DURUNEMP)+') out of range ()')
        if not P_validator.is_valid_UOCC(self.UOCC): reason.append('UOCC ('+str(self.UOCC)+') out of range ()')
        if not P_validator.is_valid_UOCC95(self.UOCC95): reason.append('UOCC95 ('+str(self.UOCC95)+') out of range ()')
        if not P_validator.is_valid_UIND(self.UIND): reason.append('UIND ('+str(self.UIND)+') out of range ()')
        if not P_validator.is_valid_UCLASSWK(self.UCLASSWK): reason.append('UCLASSWK ('+str(self.UCLASSWK)+') out of range ()')
        if not P_validator.is_valid_INCWAGE(self.INCWAGE): reason.append('INCWAGE ('+str(self.INCWAGE)+') out of range ()')
        if not P_validator.is_valid_INCNONWG(self.INCNONWG): reason.append('INCNONWG ('+str(self.INCNONWG)+') out of range ()')
        if not P_validator.is_valid_OCCSCORE(self.OCCSCORE): reason.append('OCCSCORE ('+str(self.OCCSCORE)+') out of range ()')
        if not P_validator.is_valid_SEI(self.SEI): reason.append('SEI ('+str(self.SEI)+') out of range ()')
        if not P_validator.is_valid_PRESGL(self.PRESGL): reason.append('PRESGL ('+str(self.PRESGL)+') out of range ()')
        if not P_validator.is_valid_ERSCOR50(self.ERSCOR50): reason.append('ERSCOR50 ('+str(self.ERSCOR50)+') out of range ()')
        if not P_validator.is_valid_EDSCOR50(self.EDSCOR50): reason.append('EDSCOR50 ('+str(self.EDSCOR50)+') out of range ()')
        if not P_validator.is_valid_NPBOSS50(self.NPBOSS50): reason.append('NPBOSS50 ('+str(self.NPBOSS50)+') out of range ()')
        if not P_validator.is_valid_MIGRATE5(self.MIGRATE5): reason.append('MIGRATE5 ('+str(self.MIGRATE5)+') out of range ()')
        if not P_validator.is_valid_MIGRATE5D(self.MIGRATE5D): reason.append('MIGRATE5D ('+str(self.MIGRATE5D)+') out of range ()')
        if not P_validator.is_valid_MIGPLAC5(self.MIGPLAC5): reason.append('MIGPLAC5 ('+str(self.MIGPLAC5)+') out of range ()')
        if not P_validator.is_valid_MIGMET5(self.MIGMET5): reason.append('MIGMET5 ('+str(self.MIGMET5)+') out of range ()')
        if not P_validator.is_valid_MIGTYPE5(self.MIGTYPE5): reason.append('MIGTYPE5 ('+str(self.MIGTYPE5)+') out of range ()')
        if not P_validator.is_valid_MIGCITY5(self.MIGCITY5): reason.append('MIGCITY5 ('+str(self.MIGCITY5)+') out of range ()')
        if not P_validator.is_valid_MIGSEA5(self.MIGSEA5): reason.append('MIGSEA5 ('+str(self.MIGSEA5)+') out of range ()')
        if not P_validator.is_valid_SAMEPLAC(self.SAMEPLAC): reason.append('SAMEPLAC ('+str(self.SAMEPLAC)+') out of range ()')
        if not P_validator.is_valid_SAMESEA5(self.SAMESEA5): reason.append('SAMESEA5 ('+str(self.SAMESEA5)+') out of range ()')
        if not P_validator.is_valid_MIGCOUNTY(self.MIGCOUNTY): reason.append('MIGCOUNTY ('+str(self.MIGCOUNTY)+') out of range ()')
        if not P_validator.is_valid_VETSTAT(self.VETSTAT): reason.append('VETSTAT ('+str(self.VETSTAT)+') out of range ()')
        if not P_validator.is_valid_VETSTATD(self.VETSTATD): reason.append('VETSTATD ('+str(self.VETSTATD)+') out of range ()')
        if not P_validator.is_valid_VET1940(self.VET1940): reason.append('VET1940 ('+str(self.VET1940)+') out of range ()')
        if not P_validator.is_valid_VETWWI(self.VETWWI): reason.append('VETWWI ('+str(self.VETWWI)+') out of range ()')
        if not P_validator.is_valid_VETPER(self.VETPER): reason.append('VETPER ('+str(self.VETPER)+') out of range ()')
        if not P_validator.is_valid_VETCHILD(self.VETCHILD): reason.append('VETCHILD ('+str(self.VETCHILD)+') out of range ()')
        if not P_validator.is_valid_HISTID(self.HISTID): reason.append('HISTID ('+str(self.HISTID)+') out of range ()')
        if not P_validator.is_valid_SURSIM(self.SURSIM): reason.append('SURSIM ('+str(self.SURSIM)+') out of range ()')
        if not P_validator.is_valid_SSENROLL(self.SSENROLL): reason.append('SSENROLL ('+str(self.SSENROLL)+') out of range ()')
        return ', '.join(reason)

    def SparkSQLRow(self):
        """Return a SparkSQL Row object for this object."""
        from pyspark.sql import Row
        return Row(
            rectype=safe_str(self.RECTYPE),
            year=safe_str(self.YEAR),
            datanum=safe_str(self.DATANUM),
            serial=safe_str(self.SERIAL),
            pernum=safe_str(self.PERNUM),
            perwt=safe_str(self.PERWT),
            slwt=safe_str(self.SLWT),
            slrec=safe_str(self.SLREC),
            respondt=safe_str(self.RESPONDT),
            famunit=safe_str(self.FAMUNIT),
            famsize=safe_str(self.FAMSIZE),
            subfam=safe_str(self.SUBFAM),
            sftype=safe_str(self.SFTYPE),
            sfrelate=safe_str(self.SFRELATE),
            momloc=safe_str(self.MOMLOC),
            stepmom=safe_str(self.STEPMOM),
            momrule_hist=safe_str(self.MOMRULE_HIST),
            poploc=safe_str(self.POPLOC),
            steppop=safe_str(self.STEPPOP),
            poprule_hist=safe_str(self.POPRULE_HIST),
            sploc=safe_str(self.SPLOC),
            sprule_hist=safe_str(self.SPRULE_HIST),
            nchild=safe_str(self.NCHILD),
            nchlt5=safe_str(self.NCHLT5),
            nsibs=safe_str(self.NSIBS),
            eldch=safe_str(self.ELDCH),
            yngch=safe_str(self.YNGCH),
            relate=safe_str(self.RELATE),
            related=safe_str(self.RELATED),
            sex=safe_str(self.SEX),
            age=safe_str(self.AGE),
            agemonth=safe_str(self.AGEMONTH),
            marst=safe_str(self.MARST),
            marrno=safe_str(self.MARRNO),
            agemarr=safe_str(self.AGEMARR),
            chborn=safe_str(self.CHBORN),
            race=safe_str(self.RACE),
            raced=safe_str(self.RACED),
            hispan=safe_str(self.HISPAN),
            hispand=safe_str(self.HISPAND),
            bpl=safe_str(self.BPL),
            bpld=safe_str(self.BPLD),
            mbpl=safe_str(self.MBPL),
            mbpld=safe_str(self.MBPLD),
            fbpl=safe_str(self.FBPL),
            fbpld=safe_str(self.FBPLD),
            nativity=safe_str(self.NATIVITY),
            citizen=safe_str(self.CITIZEN),
            mtongue=safe_str(self.MTONGUE),
            mtongued=safe_str(self.MTONGUED),
            spanname=safe_str(self.SPANNAME),
            hisprule=safe_str(self.HISPRULE),
            school=safe_str(self.SCHOOL),
            higrade=safe_str(self.HIGRADE),
            higraded=safe_str(self.HIGRADED),
            educ=safe_str(self.EDUC),
            educd=safe_str(self.EDUCD),
            empstat=safe_str(self.EMPSTAT),
            empstatd=safe_str(self.EMPSTATD),
            labforce=safe_str(self.LABFORCE),
            occ=safe_str(self.OCC),
            occ1950=safe_str(self.OCC1950),
            ind=safe_str(self.IND),
            ind1950=safe_str(self.IND1950),
            classwkr=safe_str(self.CLASSWKR),
            classwkrd=safe_str(self.CLASSWKRD),
            wkswork1=safe_str(self.WKSWORK1),
            wkswork2=safe_str(self.WKSWORK2),
            hrswork1=safe_str(self.HRSWORK1),
            hrswork2=safe_str(self.HRSWORK2),
            durunemp=safe_str(self.DURUNEMP),
            uocc=safe_str(self.UOCC),
            uocc95=safe_str(self.UOCC95),
            uind=safe_str(self.UIND),
            uclasswk=safe_str(self.UCLASSWK),
            incwage=safe_str(self.INCWAGE),
            incnonwg=safe_str(self.INCNONWG),
            occscore=safe_str(self.OCCSCORE),
            sei=safe_str(self.SEI),
            presgl=safe_str(self.PRESGL),
            erscor50=safe_str(self.ERSCOR50),
            edscor50=safe_str(self.EDSCOR50),
            npboss50=safe_str(self.NPBOSS50),
            migrate5=safe_str(self.MIGRATE5),
            migrate5d=safe_str(self.MIGRATE5D),
            migplac5=safe_str(self.MIGPLAC5),
            migmet5=safe_str(self.MIGMET5),
            migtype5=safe_str(self.MIGTYPE5),
            migcity5=safe_str(self.MIGCITY5),
            migsea5=safe_str(self.MIGSEA5),
            sameplac=safe_str(self.SAMEPLAC),
            samesea5=safe_str(self.SAMESEA5),
            migcounty=safe_str(self.MIGCOUNTY),
            vetstat=safe_str(self.VETSTAT),
            vetstatd=safe_str(self.VETSTATD),
            vet1940=safe_str(self.VET1940),
            vetwwi=safe_str(self.VETWWI),
            vetper=safe_str(self.VETPER),
            vetchild=safe_str(self.VETCHILD),
            histid=safe_str(self.HISTID),
            sursim=safe_str(self.SURSIM),
            ssenroll=safe_str(self.SSENROLL),
        )

    @staticmethod
    def parse_line(line):
        """Read a line and return it as a dictionary. This should be automatically generated..."""
        inst: P = P()
        inst.parse_column_specified(line)
        assert inst.validate(), f'A line is invalid!! line: {line}, validate_reason: {inst.validate_reason()}'
        row = inst.SparkSQLRow()
        return row



SPEC_CLASS_OBJECTS = [H(),P()]
null = None
SPEC_DICT = {"tables": {"H": {"name": "H", "variables": [{"name": "RECTYPE", "vtype": "VARCHAR", "position": null, "desc": "Record type", "column": 0, "width": 1, "ranges": []}, {"name": "YEAR", "vtype": "VARCHAR", "position": null, "desc": "Census year", "column": 1, "width": 4, "ranges": []}, {"name": "DATANUM", "vtype": "VARCHAR", "position": null, "desc": "Data set number", "column": 5, "width": 2, "ranges": []}, {"name": "SERIAL", "vtype": "VARCHAR", "position": null, "desc": "Household serial number", "column": 7, "width": 8, "ranges": []}, {"name": "NUMPREC", "vtype": "VARCHAR", "position": null, "desc": "Number of person records following", "column": 15, "width": 2, "ranges": []}, {"name": "SUBSAMP", "vtype": "VARCHAR", "position": null, "desc": "Subsample number", "column": 17, "width": 2, "ranges": []}, {"name": "HHWT", "vtype": "VARCHAR", "position": null, "desc": "Household weight", "column": 19, "width": 10, "ranges": []}, {"name": "NUMPERHH", "vtype": "VARCHAR", "position": null, "desc": "Number of persons in household", "column": 29, "width": 4, "ranges": []}, {"name": "HHTYPE", "vtype": "VARCHAR", "position": null, "desc": "Household Type", "column": 33, "width": 1, "ranges": []}, {"name": "DWELLING", "vtype": "VARCHAR", "position": null, "desc": "Dwelling serial number", "column": 34, "width": 8, "ranges": []}, {"name": "SLPERNUM", "vtype": "VARCHAR", "position": null, "desc": "Sample-line person number", "column": 42, "width": 2, "ranges": []}, {"name": "CPI99", "vtype": "VARCHAR", "position": null, "desc": "CPI-U adjustment factor to 1999 dollars", "column": 44, "width": 5, "ranges": []}, {"name": "REGION", "vtype": "VARCHAR", "position": null, "desc": "Census region and division", "column": 49, "width": 2, "ranges": []}, {"name": "STATEICP", "vtype": "VARCHAR", "position": null, "desc": "State (ICPSR code)", "column": 51, "width": 2, "ranges": []}, {"name": "STATEFIP", "vtype": "VARCHAR", "position": null, "desc": "State (FIPS code)", "column": 53, "width": 2, "ranges": []}, {"name": "COUNTY", "vtype": "VARCHAR", "position": null, "desc": "County", "column": 55, "width": 4, "ranges": []}, {"name": "URBAN", "vtype": "VARCHAR", "position": null, "desc": "Urban/rural status", "column": 59, "width": 1, "ranges": []}, {"name": "METRO", "vtype": "VARCHAR", "position": null, "desc": "Metropolitan status", "column": 60, "width": 1, "ranges": []}, {"name": "METAREA", "vtype": "VARCHAR", "position": null, "desc": "Metropolitan area [general version]", "column": 61, "width": 3, "ranges": []}, {"name": "METAREAD", "vtype": "VARCHAR", "position": null, "desc": "Metropolitan area [detailed version]", "column": 64, "width": 4, "ranges": []}, {"name": "CITY", "vtype": "VARCHAR", "position": null, "desc": "City", "column": 68, "width": 4, "ranges": []}, {"name": "CITYPOP", "vtype": "VARCHAR", "position": null, "desc": "City population", "column": 72, "width": 5, "ranges": []}, {"name": "SIZEPL", "vtype": "VARCHAR", "position": null, "desc": "Size of place", "column": 77, "width": 2, "ranges": []}, {"name": "URBPOP", "vtype": "VARCHAR", "position": null, "desc": "Population of urban places", "column": 79, "width": 5, "ranges": []}, {"name": "SEA", "vtype": "VARCHAR", "position": null, "desc": "State Economic Area", "column": 84, "width": 3, "ranges": []}, {"name": "WARD", "vtype": "VARCHAR", "position": null, "desc": "Ward", "column": 87, "width": 3, "ranges": []}, {"name": "CNTRY", "vtype": "VARCHAR", "position": null, "desc": "Country", "column": 90, "width": 3, "ranges": []}, {"name": "GQ", "vtype": "VARCHAR", "position": null, "desc": "Group quarters status", "column": 93, "width": 1, "ranges": []}, {"name": "GQTYPE", "vtype": "VARCHAR", "position": null, "desc": "Group quarters type [general version]", "column": 94, "width": 1, "ranges": []}, {"name": "GQTYPED", "vtype": "VARCHAR", "position": null, "desc": "Group quarters type [detailed version]", "column": 95, "width": 3, "ranges": []}, {"name": "GQFUNDS", "vtype": "VARCHAR", "position": null, "desc": "Group quarters funding", "column": 98, "width": 2, "ranges": []}, {"name": "FARM", "vtype": "VARCHAR", "position": null, "desc": "Farm status", "column": 100, "width": 1, "ranges": []}, {"name": "OWNERSHP", "vtype": "VARCHAR", "position": null, "desc": "Ownership of dwelling (tenure) [general version]", "column": 101, "width": 1, "ranges": []}, {"name": "OWNERSHPD", "vtype": "VARCHAR", "position": null, "desc": "Ownership of dwelling (tenure) [detailed version]", "column": 102, "width": 2, "ranges": []}, {"name": "RENT", "vtype": "VARCHAR", "position": null, "desc": "Monthly contract rent", "column": 104, "width": 4, "ranges": []}, {"name": "VALUEH", "vtype": "VARCHAR", "position": null, "desc": "House value", "column": 108, "width": 7, "ranges": []}, {"name": "NFAMS", "vtype": "VARCHAR", "position": null, "desc": "Number of families in household", "column": 115, "width": 2, "ranges": []}, {"name": "NSUBFAM", "vtype": "VARCHAR", "position": null, "desc": "Number of subfamilies in household", "column": 117, "width": 1, "ranges": []}, {"name": "NCOUPLES", "vtype": "VARCHAR", "position": null, "desc": "Number of couples in household", "column": 118, "width": 1, "ranges": []}, {"name": "NMOTHERS", "vtype": "VARCHAR", "position": null, "desc": "Number of mothers in household", "column": 119, "width": 1, "ranges": []}, {"name": "NFATHERS", "vtype": "VARCHAR", "position": null, "desc": "Number of fathers in household", "column": 120, "width": 1, "ranges": []}, {"name": "MULTGEN", "vtype": "VARCHAR", "position": null, "desc": "Multigenerational household [general version]", "column": 121, "width": 1, "ranges": []}, {"name": "MULTGEND", "vtype": "VARCHAR", "position": null, "desc": "Multigenerational household [detailed version]", "column": 122, "width": 2, "ranges": []}, {"name": "ENUMDIST", "vtype": "VARCHAR", "position": null, "desc": "Enumeration district", "column": 124, "width": 4, "ranges": []}, {"name": "SUPDIST", "vtype": "VARCHAR", "position": null, "desc": "Supervisor's district number", "column": 128, "width": 3, "ranges": []}, {"name": "RESPOND", "vtype": "VARCHAR", "position": null, "desc": "Respondent's relationship to household  head", "column": 131, "width": 1, "ranges": []}, {"name": "SPLIT", "vtype": "VARCHAR", "position": null, "desc": "Large group quarters that was split up (100% datasets)", "column": 132, "width": 1, "ranges": []}, {"name": "SPLITHID", "vtype": "VARCHAR", "position": null, "desc": "Household serial number, before large group quarters were split up (100% datasets)", "column": 133, "width": 8, "ranges": []}, {"name": "SPLITNUM", "vtype": "VARCHAR", "position": null, "desc": "Number of person records in household, before large group quarters were split up  (100% datasets)", "column": 141, "width": 4, "ranges": []}, {"name": "SPLIT40", "vtype": "VARCHAR", "position": null, "desc": "Large group quarters that was split up, 1940 100%", "column": 145, "width": 1, "ranges": []}, {"name": "SERIAL40", "vtype": "VARCHAR", "position": null, "desc": "Household serial number, before large group quarters were split up, 1940 100%", "column": 146, "width": 8, "ranges": []}, {"name": "NUMPREC40", "vtype": "VARCHAR", "position": null, "desc": "Number of person records in household, before large group quarters were split up, 1940 100%", "column": 154, "width": 4, "ranges": []}, {"name": "EDMISS", "vtype": "VARCHAR", "position": null, "desc": "Identifies households in missing data enumeration districts", "column": 158, "width": 1, "ranges": []}]}, "P": {"name": "P", "variables": [{"name": "RECTYPE", "vtype": "VARCHAR", "position": null, "desc": "Record type", "column": 0, "width": 1, "ranges": []}, {"name": "YEAR", "vtype": "VARCHAR", "position": null, "desc": "Census year", "column": 1, "width": 4, "ranges": []}, {"name": "DATANUM", "vtype": "VARCHAR", "position": null, "desc": "Data set number", "column": 5, "width": 2, "ranges": []}, {"name": "SERIAL", "vtype": "VARCHAR", "position": null, "desc": "Household serial number", "column": 7, "width": 8, "ranges": []}, {"name": "PERNUM", "vtype": "VARCHAR", "position": null, "desc": "Person number in sample unit", "column": 15, "width": 4, "ranges": []}, {"name": "PERWT", "vtype": "VARCHAR", "position": null, "desc": "Person weight", "column": 19, "width": 10, "ranges": []}, {"name": "SLWT", "vtype": "VARCHAR", "position": null, "desc": "Sample-line weight", "column": 29, "width": 10, "ranges": []}, {"name": "SLREC", "vtype": "VARCHAR", "position": null, "desc": "Sample-line person identifier", "column": 39, "width": 1, "ranges": []}, {"name": "RESPONDT", "vtype": "VARCHAR", "position": null, "desc": "Respondent indicator", "column": 40, "width": 1, "ranges": []}, {"name": "FAMUNIT", "vtype": "VARCHAR", "position": null, "desc": "Family unit membership", "column": 41, "width": 2, "ranges": []}, {"name": "FAMSIZE", "vtype": "VARCHAR", "position": null, "desc": "Number of own family members in household", "column": 43, "width": 2, "ranges": []}, {"name": "SUBFAM", "vtype": "VARCHAR", "position": null, "desc": "Subfamily membership", "column": 45, "width": 1, "ranges": []}, {"name": "SFTYPE", "vtype": "VARCHAR", "position": null, "desc": "Subfamily type", "column": 46, "width": 1, "ranges": []}, {"name": "SFRELATE", "vtype": "VARCHAR", "position": null, "desc": "Relationship within subfamily", "column": 47, "width": 1, "ranges": []}, {"name": "MOMLOC", "vtype": "VARCHAR", "position": null, "desc": "Mother's location in the household", "column": 48, "width": 2, "ranges": []}, {"name": "STEPMOM", "vtype": "VARCHAR", "position": null, "desc": "Probable step/adopted mother", "column": 50, "width": 1, "ranges": []}, {"name": "MOMRULE_HIST", "vtype": "VARCHAR", "position": null, "desc": "", "column": 51, "width": 1, "ranges": []}, {"name": "POPLOC", "vtype": "VARCHAR", "position": null, "desc": "Father's location in the household", "column": 52, "width": 2, "ranges": []}, {"name": "STEPPOP", "vtype": "VARCHAR", "position": null, "desc": "Probable step/adopted father", "column": 54, "width": 1, "ranges": []}, {"name": "POPRULE_HIST", "vtype": "VARCHAR", "position": null, "desc": "", "column": 55, "width": 1, "ranges": []}, {"name": "SPLOC", "vtype": "VARCHAR", "position": null, "desc": "Spouse's location in household", "column": 56, "width": 2, "ranges": []}, {"name": "SPRULE_HIST", "vtype": "VARCHAR", "position": null, "desc": "", "column": 58, "width": 1, "ranges": []}, {"name": "NCHILD", "vtype": "VARCHAR", "position": null, "desc": "Number of own children in the household", "column": 59, "width": 1, "ranges": []}, {"name": "NCHLT5", "vtype": "VARCHAR", "position": null, "desc": "Number of own children under age 5 in household", "column": 60, "width": 1, "ranges": []}, {"name": "NSIBS", "vtype": "VARCHAR", "position": null, "desc": "Number of own siblings in household", "column": 61, "width": 1, "ranges": []}, {"name": "ELDCH", "vtype": "VARCHAR", "position": null, "desc": "Age of eldest own child in household", "column": 62, "width": 2, "ranges": []}, {"name": "YNGCH", "vtype": "VARCHAR", "position": null, "desc": "Age of youngest own child in household", "column": 64, "width": 2, "ranges": []}, {"name": "RELATE", "vtype": "VARCHAR", "position": null, "desc": "Relationship to household head [general version]", "column": 66, "width": 2, "ranges": []}, {"name": "RELATED", "vtype": "VARCHAR", "position": null, "desc": "Relationship to household head [detailed version]", "column": 68, "width": 4, "ranges": []}, {"name": "SEX", "vtype": "VARCHAR", "position": null, "desc": "Sex", "column": 72, "width": 1, "ranges": []}, {"name": "AGE", "vtype": "VARCHAR", "position": null, "desc": "Age", "column": 73, "width": 3, "ranges": []}, {"name": "AGEMONTH", "vtype": "VARCHAR", "position": null, "desc": "Age in months", "column": 76, "width": 2, "ranges": []}, {"name": "MARST", "vtype": "VARCHAR", "position": null, "desc": "Marital status", "column": 78, "width": 1, "ranges": []}, {"name": "MARRNO", "vtype": "VARCHAR", "position": null, "desc": "Times married", "column": 79, "width": 1, "ranges": []}, {"name": "AGEMARR", "vtype": "VARCHAR", "position": null, "desc": "Age at first marriage", "column": 80, "width": 2, "ranges": []}, {"name": "CHBORN", "vtype": "VARCHAR", "position": null, "desc": "Children ever born", "column": 82, "width": 2, "ranges": []}, {"name": "RACE", "vtype": "VARCHAR", "position": null, "desc": "Race [general version]", "column": 84, "width": 1, "ranges": []}, {"name": "RACED", "vtype": "VARCHAR", "position": null, "desc": "Race [detailed version]", "column": 85, "width": 3, "ranges": []}, {"name": "HISPAN", "vtype": "VARCHAR", "position": null, "desc": "Hispanic origin [general version]", "column": 88, "width": 1, "ranges": []}, {"name": "HISPAND", "vtype": "VARCHAR", "position": null, "desc": "Hispanic origin [detailed version]", "column": 89, "width": 3, "ranges": []}, {"name": "BPL", "vtype": "VARCHAR", "position": null, "desc": "Birthplace [general version]", "column": 92, "width": 3, "ranges": []}, {"name": "BPLD", "vtype": "VARCHAR", "position": null, "desc": "Birthplace [detailed version]", "column": 95, "width": 5, "ranges": []}, {"name": "MBPL", "vtype": "VARCHAR", "position": null, "desc": "Mother's birthplace [general version]", "column": 100, "width": 3, "ranges": []}, {"name": "MBPLD", "vtype": "VARCHAR", "position": null, "desc": "Mother's birthplace [detailed version]", "column": 103, "width": 5, "ranges": []}, {"name": "FBPL", "vtype": "VARCHAR", "position": null, "desc": "Father's birthplace [general version]", "column": 108, "width": 3, "ranges": []}, {"name": "FBPLD", "vtype": "VARCHAR", "position": null, "desc": "Father's birthplace [detailed version]", "column": 111, "width": 5, "ranges": []}, {"name": "NATIVITY", "vtype": "VARCHAR", "position": null, "desc": "Foreign birthplace or parentage", "column": 116, "width": 1, "ranges": []}, {"name": "CITIZEN", "vtype": "VARCHAR", "position": null, "desc": "Citizenship status", "column": 117, "width": 1, "ranges": []}, {"name": "MTONGUE", "vtype": "VARCHAR", "position": null, "desc": "Mother tongue [general version]", "column": 118, "width": 2, "ranges": []}, {"name": "MTONGUED", "vtype": "VARCHAR", "position": null, "desc": "Mother tongue [detailed version]", "column": 120, "width": 4, "ranges": []}, {"name": "SPANNAME", "vtype": "VARCHAR", "position": null, "desc": "Spanish surname", "column": 124, "width": 1, "ranges": []}, {"name": "HISPRULE", "vtype": "VARCHAR", "position": null, "desc": "Hispanic origin rule", "column": 125, "width": 1, "ranges": []}, {"name": "SCHOOL", "vtype": "VARCHAR", "position": null, "desc": "School attendance", "column": 126, "width": 1, "ranges": []}, {"name": "HIGRADE", "vtype": "VARCHAR", "position": null, "desc": "Highest grade of schooling [general version]", "column": 127, "width": 2, "ranges": []}, {"name": "HIGRADED", "vtype": "VARCHAR", "position": null, "desc": "Highest grade of schooling [detailed version]", "column": 129, "width": 3, "ranges": []}, {"name": "EDUC", "vtype": "VARCHAR", "position": null, "desc": "Educational attainment [general version]", "column": 132, "width": 2, "ranges": []}, {"name": "EDUCD", "vtype": "VARCHAR", "position": null, "desc": "Educational attainment [detailed version]", "column": 134, "width": 3, "ranges": []}, {"name": "EMPSTAT", "vtype": "VARCHAR", "position": null, "desc": "Employment status [general version]", "column": 137, "width": 1, "ranges": []}, {"name": "EMPSTATD", "vtype": "VARCHAR", "position": null, "desc": "Employment status [detailed version]", "column": 138, "width": 2, "ranges": []}, {"name": "LABFORCE", "vtype": "VARCHAR", "position": null, "desc": "Labor force status", "column": 140, "width": 1, "ranges": []}, {"name": "OCC", "vtype": "VARCHAR", "position": null, "desc": "Occupation", "column": 141, "width": 4, "ranges": []}, {"name": "OCC1950", "vtype": "VARCHAR", "position": null, "desc": "Occupation, 1950 basis", "column": 145, "width": 3, "ranges": []}, {"name": "IND", "vtype": "VARCHAR", "position": null, "desc": "Industry", "column": 148, "width": 4, "ranges": []}, {"name": "IND1950", "vtype": "VARCHAR", "position": null, "desc": "Industry, 1950 basis", "column": 152, "width": 3, "ranges": []}, {"name": "CLASSWKR", "vtype": "VARCHAR", "position": null, "desc": "Class of worker [general version]", "column": 155, "width": 1, "ranges": []}, {"name": "CLASSWKRD", "vtype": "VARCHAR", "position": null, "desc": "Class of worker [detailed version]", "column": 156, "width": 2, "ranges": []}, {"name": "WKSWORK1", "vtype": "VARCHAR", "position": null, "desc": "Weeks worked last year", "column": 158, "width": 2, "ranges": []}, {"name": "WKSWORK2", "vtype": "VARCHAR", "position": null, "desc": "Weeks worked last year, intervalled", "column": 160, "width": 1, "ranges": []}, {"name": "HRSWORK1", "vtype": "VARCHAR", "position": null, "desc": "Hours worked last week", "column": 161, "width": 2, "ranges": []}, {"name": "HRSWORK2", "vtype": "VARCHAR", "position": null, "desc": "Hours worked last week, intervalled", "column": 163, "width": 1, "ranges": []}, {"name": "DURUNEMP", "vtype": "VARCHAR", "position": null, "desc": "Continuous weeks unemployed", "column": 164, "width": 3, "ranges": []}, {"name": "UOCC", "vtype": "VARCHAR", "position": null, "desc": "Usual occupation", "column": 167, "width": 3, "ranges": []}, {"name": "UOCC95", "vtype": "VARCHAR", "position": null, "desc": "Usual occupation, 1950 classification", "column": 170, "width": 3, "ranges": []}, {"name": "UIND", "vtype": "VARCHAR", "position": null, "desc": "Usual industry", "column": 173, "width": 3, "ranges": []}, {"name": "UCLASSWK", "vtype": "VARCHAR", "position": null, "desc": "Usual class of worker", "column": 176, "width": 1, "ranges": []}, {"name": "INCWAGE", "vtype": "VARCHAR", "position": null, "desc": "Wage and salary income", "column": 177, "width": 6, "ranges": []}, {"name": "INCNONWG", "vtype": "VARCHAR", "position": null, "desc": "Had non-wage/salary income over $50", "column": 183, "width": 1, "ranges": []}, {"name": "OCCSCORE", "vtype": "VARCHAR", "position": null, "desc": "Occupational income score", "column": 184, "width": 2, "ranges": []}, {"name": "SEI", "vtype": "VARCHAR", "position": null, "desc": "Duncan Socioeconomic Index", "column": 186, "width": 2, "ranges": []}, {"name": "PRESGL", "vtype": "VARCHAR", "position": null, "desc": "Occupational prestige score, Siegel", "column": 188, "width": 3, "ranges": []}, {"name": "ERSCOR50", "vtype": "VARCHAR", "position": null, "desc": "Occupational earnings score, 1950 basis", "column": 191, "width": 4, "ranges": []}, {"name": "EDSCOR50", "vtype": "VARCHAR", "position": null, "desc": "Occupational education score, 1950 basis", "column": 195, "width": 4, "ranges": []}, {"name": "NPBOSS50", "vtype": "VARCHAR", "position": null, "desc": "Nam-Powers-Boyd occupational status score, 1950 basis", "column": 199, "width": 4, "ranges": []}, {"name": "MIGRATE5", "vtype": "VARCHAR", "position": null, "desc": "Migration status, 5 years [general version]", "column": 203, "width": 1, "ranges": []}, {"name": "MIGRATE5D", "vtype": "VARCHAR", "position": null, "desc": "Migration status, 5 years [detailed version]", "column": 204, "width": 2, "ranges": []}, {"name": "MIGPLAC5", "vtype": "VARCHAR", "position": null, "desc": "State or country of residence 5 years ago", "column": 206, "width": 3, "ranges": []}, {"name": "MIGMET5", "vtype": "VARCHAR", "position": null, "desc": "Metropolitan area of residence 5 years ago", "column": 209, "width": 4, "ranges": []}, {"name": "MIGTYPE5", "vtype": "VARCHAR", "position": null, "desc": "Metropolitan status 5 years ago", "column": 213, "width": 1, "ranges": []}, {"name": "MIGCITY5", "vtype": "VARCHAR", "position": null, "desc": "City of residence 5 years ago", "column": 214, "width": 4, "ranges": []}, {"name": "MIGSEA5", "vtype": "VARCHAR", "position": null, "desc": "SEA of residence 5 years ago", "column": 218, "width": 3, "ranges": []}, {"name": "SAMEPLAC", "vtype": "VARCHAR", "position": null, "desc": "Lived same incorporated place 5 years ago", "column": 221, "width": 1, "ranges": []}, {"name": "SAMESEA5", "vtype": "VARCHAR", "position": null, "desc": "Lived same SEA 5 years ago", "column": 222, "width": 1, "ranges": []}, {"name": "MIGCOUNTY", "vtype": "VARCHAR", "position": null, "desc": "County of residence 5 years ago", "column": 223, "width": 4, "ranges": []}, {"name": "VETSTAT", "vtype": "VARCHAR", "position": null, "desc": "Veteran status [general version]", "column": 227, "width": 1, "ranges": []}, {"name": "VETSTATD", "vtype": "VARCHAR", "position": null, "desc": "Veteran status [detailed version]", "column": 228, "width": 2, "ranges": []}, {"name": "VET1940", "vtype": "VARCHAR", "position": null, "desc": "Veteran status, 1940", "column": 230, "width": 1, "ranges": []}, {"name": "VETWWI", "vtype": "VARCHAR", "position": null, "desc": "Veteran, served during WWI era", "column": 231, "width": 1, "ranges": []}, {"name": "VETPER", "vtype": "VARCHAR", "position": null, "desc": "Veteran period of service, 1940", "column": 232, "width": 1, "ranges": []}, {"name": "VETCHILD", "vtype": "VARCHAR", "position": null, "desc": "Mortality status of child's veteran father", "column": 233, "width": 1, "ranges": []}, {"name": "HISTID", "vtype": "VARCHAR", "position": null, "desc": "Consistent historical data person identifier", "column": 234, "width": 36, "ranges": []}, {"name": "SURSIM", "vtype": "VARCHAR", "position": null, "desc": "Surname similarity", "column": 270, "width": 2, "ranges": []}, {"name": "SSENROLL", "vtype": "VARCHAR", "position": null, "desc": "Social Security enrollment", "column": 272, "width": 1, "ranges": []}]}}}